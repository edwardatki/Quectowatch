
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c2c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080070e4  080070e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000008  080070ec  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e44  20000064  08007148  00009064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ea8  08007148  00009ea8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005885b  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005814  00000000  00000000  000618ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000046d8  00000000  00000000  00067108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000353b  00000000  00000000  0006b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026436  00000000  00000000  0006ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cf8b  00000000  00000000  00095151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fb0d0  00000000  00000000  000c20dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bd1ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0001390c  00000000  00000000  001bd1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001d0afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d54 	.word	0x08006d54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	08006d54 	.word	0x08006d54

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	2001      	movs	r0, #1
 800026a:	f7ff ffd9 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	2002      	movs	r0, #2
 8000270:	f7ff ffd6 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000274:	2080      	movs	r0, #128	@ 0x80
 8000276:	f7ff ffd3 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	2004      	movs	r0, #4
 800027c:	f7ff ffd0 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|AUX_EN_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f248 0108 	movw	r1, #32776	@ 0x8008
 8000286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028a:	f001 fb39 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_REFRESH_GPIO_Port, LCD_REFRESH_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000294:	4828      	ldr	r0, [pc, #160]	@ (8000338 <MX_GPIO_Init+0xe4>)
 8000296:	f001 fb33 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|AUX_EN_Pin;
 800029a:	f248 0308 	movw	r3, #32776	@ 0x8008
 800029e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4619      	mov	r1, r3
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b4:	f001 f99c 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SW_UP_Pin|SW_MENU_Pin|SW_DOWN_Pin;
 80002b8:	f24c 0340 	movw	r3, #49216	@ 0xc040
 80002bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	481c      	ldr	r0, [pc, #112]	@ (800033c <MX_GPIO_Init+0xe8>)
 80002cc:	f001 f990 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_LIGHT_Pin;
 80002d0:	2308      	movs	r3, #8
 80002d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW_LIGHT_GPIO_Port, &GPIO_InitStruct);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4817      	ldr	r0, [pc, #92]	@ (8000340 <MX_GPIO_Init+0xec>)
 80002e2:	f001 f985 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|SW_RESET_Pin;
 80002e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80002ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4619      	mov	r1, r3
 80002f8:	4810      	ldr	r0, [pc, #64]	@ (800033c <MX_GPIO_Init+0xe8>)
 80002fa:	f001 f979 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FG_INT_Pin;
 80002fe:	2305      	movs	r3, #5
 8000300:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	@ (8000338 <MX_GPIO_Init+0xe4>)
 8000310:	f001 f96e 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_REFRESH_Pin;
 8000314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000318:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_REFRESH_GPIO_Port, &GPIO_InitStruct);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	4803      	ldr	r0, [pc, #12]	@ (8000338 <MX_GPIO_Init+0xe4>)
 800032c:	f001 f960 	bl	80015f0 <HAL_GPIO_Init>

}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	48000800 	.word	0x48000800
 800033c:	48000400 	.word	0x48000400
 8000340:	48001c00 	.word	0x48001c00

08000344 <LL_AHB2_GRP1_EnableClock>:
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800034c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000350:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4313      	orrs	r3, r2
 800035a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800035c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000360:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4013      	ands	r3, r2
 8000366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000368:	68fb      	ldr	r3, [r7, #12]
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000376:	b480      	push	{r7}
 8000378:	b085      	sub	sp, #20
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000382:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800038e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000392:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4013      	ands	r3, r2
 8000398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_I2C1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_I2C1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_I2C1_Init+0x74>)
 80003b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000424 <MX_I2C1_Init+0x7c>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_I2C1_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_I2C1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e2:	480e      	ldr	r0, [pc, #56]	@ (800041c <MX_I2C1_Init+0x74>)
 80003e4:	f001 fabe 	bl	8001964 <HAL_I2C_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ee:	f000 fc06 	bl	8000bfe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4809      	ldr	r0, [pc, #36]	@ (800041c <MX_I2C1_Init+0x74>)
 80003f6:	f001 fb50 	bl	8001a9a <HAL_I2CEx_ConfigAnalogFilter>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000400:	f000 fbfd 	bl	8000bfe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000404:	2100      	movs	r1, #0
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_I2C1_Init+0x74>)
 8000408:	f001 fb92 	bl	8001b30 <HAL_I2CEx_ConfigDigitalFilter>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 fbf4 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000080 	.word	0x20000080
 8000420:	40005400 	.word	0x40005400
 8000424:	10b17db5 	.word	0x10b17db5

08000428 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <MX_I2C3_Init+0x74>)
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <MX_I2C3_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_I2C3_Init+0x74>)
 8000434:	4a1b      	ldr	r2, [pc, #108]	@ (80004a4 <MX_I2C3_Init+0x7c>)
 8000436:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_I2C3_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_I2C3_Init+0x74>)
 8000440:	2201      	movs	r2, #1
 8000442:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <MX_I2C3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_I2C3_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <MX_I2C3_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <MX_I2C3_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_I2C3_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000462:	480e      	ldr	r0, [pc, #56]	@ (800049c <MX_I2C3_Init+0x74>)
 8000464:	f001 fa7e 	bl	8001964 <HAL_I2C_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800046e:	f000 fbc6 	bl	8000bfe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000472:	2100      	movs	r1, #0
 8000474:	4809      	ldr	r0, [pc, #36]	@ (800049c <MX_I2C3_Init+0x74>)
 8000476:	f001 fb10 	bl	8001a9a <HAL_I2CEx_ConfigAnalogFilter>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000480:	f000 fbbd 	bl	8000bfe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000484:	2100      	movs	r1, #0
 8000486:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_I2C3_Init+0x74>)
 8000488:	f001 fb52 	bl	8001b30 <HAL_I2CEx_ConfigDigitalFilter>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 fbb4 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000d4 	.word	0x200000d4
 80004a0:	40005c00 	.word	0x40005c00
 80004a4:	10b17db5 	.word	0x10b17db5

080004a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09c      	sub	sp, #112	@ 0x70
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	2250      	movs	r2, #80	@ 0x50
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f005 ffc3 	bl	8006454 <memset>
  if(i2cHandle->Instance==I2C1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a41      	ldr	r2, [pc, #260]	@ (80005d8 <HAL_I2C_MspInit+0x130>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d13b      	bne.n	8000550 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004d8:	2304      	movs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004dc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 f898 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004f2:	f000 fb84 	bl	8000bfe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	2002      	movs	r0, #2
 80004f8:	f7ff ff24 	bl	8000344 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff21 	bl	8000344 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000506:	2312      	movs	r3, #18
 8000508:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000512:	2304      	movs	r3, #4
 8000514:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800051a:	4619      	mov	r1, r3
 800051c:	482f      	ldr	r0, [pc, #188]	@ (80005dc <HAL_I2C_MspInit+0x134>)
 800051e:	f001 f867 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8000522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000526:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000528:	2312      	movs	r3, #18
 800052a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000534:	2304      	movs	r3, #4
 8000536:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000542:	f001 f855 	bl	80015f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000546:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800054a:	f7ff ff14 	bl	8000376 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800054e:	e03e      	b.n	80005ce <HAL_I2C_MspInit+0x126>
  else if(i2cHandle->Instance==I2C3)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <HAL_I2C_MspInit+0x138>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d139      	bne.n	80005ce <HAL_I2C_MspInit+0x126>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800055a:	2308      	movs	r3, #8
 800055c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800055e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4618      	mov	r0, r3
 800056a:	f003 f857 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000574:	f000 fb43 	bl	8000bfe <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff fee3 	bl	8000344 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fee0 	bl	8000344 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = FG_SDA_Pin;
 8000584:	2302      	movs	r3, #2
 8000586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000588:	2312      	movs	r3, #18
 800058a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000594:	2304      	movs	r3, #4
 8000596:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(FG_SDA_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800059c:	4619      	mov	r1, r3
 800059e:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <HAL_I2C_MspInit+0x13c>)
 80005a0:	f001 f826 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FG_SCL_Pin;
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a8:	2312      	movs	r3, #18
 80005aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80005b4:	2304      	movs	r3, #4
 80005b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(FG_SCL_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005bc:	4619      	mov	r1, r3
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f001 f815 	bl	80015f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80005c6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80005ca:	f7ff fed4 	bl	8000376 <LL_APB1_GRP1_EnableClock>
}
 80005ce:	bf00      	nop
 80005d0:	3770      	adds	r7, #112	@ 0x70
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40005400 	.word	0x40005400
 80005dc:	48000400 	.word	0x48000400
 80005e0:	40005c00 	.word	0x40005c00
 80005e4:	48000800 	.word	0x48000800

080005e8 <LL_AHB2_GRP1_EnableClock>:
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000604:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4013      	ands	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_APB1_GRP1_EnableClock>:
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000626:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4313      	orrs	r3, r2
 8000630:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_LPTIM1_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_LPTIM1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000668:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_LPTIM1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_LPTIM1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_LPTIM1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_LPTIM1_Init+0x50>)
 800068a:	f001 fa9d 	bl	8001bc8 <HAL_LPTIM_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 fab3 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000128 	.word	0x20000128
 80006a0:	40007c00 	.word	0x40007c00

080006a4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	@ 0x70
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2250      	movs	r2, #80	@ 0x50
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fec5 	bl	8006454 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <HAL_LPTIM_MspInit+0x84>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d125      	bne.n	8000720 <HAL_LPTIM_MspInit+0x7c>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80006d4:	2310      	movs	r3, #16
 80006d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 80006d8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 ff9a 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80006ee:	f000 fa86 	bl	8000bfe <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80006f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80006f6:	f7ff ff90 	bl	800061a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff ff74 	bl	80005e8 <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PB2     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = LIGHT_EN_Pin;
 8000700:	2304      	movs	r3, #4
 8000702:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000710:	2301      	movs	r3, #1
 8000712:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(LIGHT_EN_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <HAL_LPTIM_MspInit+0x88>)
 800071c:	f000 ff68 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3770      	adds	r7, #112	@ 0x70
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40007c00 	.word	0x40007c00
 800072c:	48000400 	.word	0x48000400

08000730 <u8x8_gpio_and_delay_stm32>:
#include "u8g2.h"

u8g2_t lcd;

// U8g2 driver function
uint8_t u8x8_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	72fb      	strb	r3, [r7, #11]
 800073e:	4613      	mov	r3, r2
 8000740:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	3b28      	subs	r3, #40	@ 0x28
 8000746:	2b23      	cmp	r3, #35	@ 0x23
 8000748:	d85c      	bhi.n	8000804 <u8x8_gpio_and_delay_stm32+0xd4>
 800074a:	a201      	add	r2, pc, #4	@ (adr r2, 8000750 <u8x8_gpio_and_delay_stm32+0x20>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	080007e1 	.word	0x080007e1
 8000754:	080007e9 	.word	0x080007e9
 8000758:	08000805 	.word	0x08000805
 800075c:	08000805 	.word	0x08000805
 8000760:	08000805 	.word	0x08000805
 8000764:	08000805 	.word	0x08000805
 8000768:	08000805 	.word	0x08000805
 800076c:	08000805 	.word	0x08000805
 8000770:	08000805 	.word	0x08000805
 8000774:	08000805 	.word	0x08000805
 8000778:	08000805 	.word	0x08000805
 800077c:	08000805 	.word	0x08000805
 8000780:	08000805 	.word	0x08000805
 8000784:	08000805 	.word	0x08000805
 8000788:	08000805 	.word	0x08000805
 800078c:	08000805 	.word	0x08000805
 8000790:	08000805 	.word	0x08000805
 8000794:	08000805 	.word	0x08000805
 8000798:	08000805 	.word	0x08000805
 800079c:	08000805 	.word	0x08000805
 80007a0:	08000805 	.word	0x08000805
 80007a4:	08000805 	.word	0x08000805
 80007a8:	08000805 	.word	0x08000805
 80007ac:	08000805 	.word	0x08000805
 80007b0:	08000805 	.word	0x08000805
 80007b4:	08000805 	.word	0x08000805
 80007b8:	08000805 	.word	0x08000805
 80007bc:	08000805 	.word	0x08000805
 80007c0:	08000805 	.word	0x08000805
 80007c4:	08000805 	.word	0x08000805
 80007c8:	08000805 	.word	0x08000805
 80007cc:	08000805 	.word	0x08000805
 80007d0:	08000805 	.word	0x08000805
 80007d4:	080007f3 	.word	0x080007f3
 80007d8:	08000805 	.word	0x08000805
 80007dc:	08000805 	.word	0x08000805
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f000 fd73 	bl	80012cc <HAL_Delay>
		break;
 80007e6:	e00d      	b.n	8000804 <u8x8_gpio_and_delay_stm32+0xd4>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80007e8:	7abb      	ldrb	r3, [r7, #10]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fd6e 	bl	80012cc <HAL_Delay>
		break;
 80007f0:	e008      	b.n	8000804 <u8x8_gpio_and_delay_stm32+0xd4>
	case U8X8_MSG_GPIO_CS:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, (GPIO_PinState)arg_int);
 80007f2:	7abb      	ldrb	r3, [r7, #10]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f001 f87f 	bl	8001900 <HAL_GPIO_WritePin>
		break;
 8000802:	bf00      	nop
		break;
	case U8X8_MSG_GPIO_RESET:
		// Not required
		break;
	}
	return 1;
 8000804:	2301      	movs	r3, #1
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop

08000810 <u8x8_byte_4wire_sw_spi_stm32>:

// U8g2 driver function
uint8_t u8x8_byte_4wire_sw_spi_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	72fb      	strb	r3, [r7, #11]
 800081e:	4613      	mov	r3, r2
 8000820:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	3b14      	subs	r3, #20
 8000826:	2b0c      	cmp	r3, #12
 8000828:	d847      	bhi.n	80008ba <u8x8_byte_4wire_sw_spi_stm32+0xaa>
 800082a:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <u8x8_byte_4wire_sw_spi_stm32+0x20>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	0800087f 	.word	0x0800087f
 8000834:	080008bb 	.word	0x080008bb
 8000838:	080008bb 	.word	0x080008bb
 800083c:	08000865 	.word	0x08000865
 8000840:	08000891 	.word	0x08000891
 8000844:	080008a3 	.word	0x080008a3
 8000848:	080008bb 	.word	0x080008bb
 800084c:	080008bb 	.word	0x080008bb
 8000850:	080008bb 	.word	0x080008bb
 8000854:	080008bb 	.word	0x080008bb
 8000858:	080008bb 	.word	0x080008bb
 800085c:	080008bb 	.word	0x080008bb
 8000860:	080008bf 	.word	0x080008bf
	case U8X8_MSG_BYTE_SEND:
		if(HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000) != HAL_OK) return 0;;
 8000864:	7abb      	ldrb	r3, [r7, #10]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f242 7310 	movw	r3, #10000	@ 0x2710
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <u8x8_byte_4wire_sw_spi_stm32+0xc0>)
 8000870:	f003 fcae 	bl	80041d0 <HAL_SPI_Transmit>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d023      	beq.n	80008c2 <u8x8_byte_4wire_sw_spi_stm32+0xb2>
 800087a:	2300      	movs	r3, #0
 800087c:	e023      	b.n	80008c6 <u8x8_byte_4wire_sw_spi_stm32+0xb6>
		break;
	case U8X8_MSG_BYTE_INIT:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	461a      	mov	r2, r3
 8000886:	2149      	movs	r1, #73	@ 0x49
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f005 fd54 	bl	8006336 <u8x8_gpio_call>
		break;
 800088e:	e019      	b.n	80008c4 <u8x8_byte_4wire_sw_spi_stm32+0xb4>
	case U8X8_MSG_BYTE_SET_DC:
		// Not required
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	2149      	movs	r1, #73	@ 0x49
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f005 fd4b 	bl	8006336 <u8x8_gpio_call>
//		HAL_Delay(1);
		break;
 80008a0:	e010      	b.n	80008c4 <u8x8_byte_4wire_sw_spi_stm32+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 fd12 	bl	80012cc <HAL_Delay>
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	461a      	mov	r2, r3
 80008b0:	2149      	movs	r1, #73	@ 0x49
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f005 fd3f 	bl	8006336 <u8x8_gpio_call>
		break;
 80008b8:	e004      	b.n	80008c4 <u8x8_byte_4wire_sw_spi_stm32+0xb4>
	default:
		return 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e003      	b.n	80008c6 <u8x8_byte_4wire_sw_spi_stm32+0xb6>
		break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <u8x8_byte_4wire_sw_spi_stm32+0xb4>
		break;
 80008c2:	bf00      	nop
	}
	return 1;
 80008c4:	2301      	movs	r3, #1
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000218 	.word	0x20000218

080008d4 <lcd_init>:

void lcd_init() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	u8g2_Setup_ls013b7dh03_128x128_f(&lcd, U8G2_R2, u8x8_byte_4wire_sw_spi_stm32, u8x8_gpio_and_delay_stm32);
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <lcd_init+0x24>)
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <lcd_init+0x28>)
 80008dc:	4908      	ldr	r1, [pc, #32]	@ (8000900 <lcd_init+0x2c>)
 80008de:	4809      	ldr	r0, [pc, #36]	@ (8000904 <lcd_init+0x30>)
 80008e0:	f004 f964 	bl	8004bac <u8g2_Setup_ls013b7dh03_128x128_f>
	u8g2_InitDisplay(&lcd);
 80008e4:	4807      	ldr	r0, [pc, #28]	@ (8000904 <lcd_init+0x30>)
 80008e6:	f005 fcf7 	bl	80062d8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&lcd, 0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <lcd_init+0x30>)
 80008ee:	f005 fd02 	bl	80062f6 <u8x8_SetPowerSave>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08000731 	.word	0x08000731
 80008fc:	08000811 	.word	0x08000811
 8000900:	08007084 	.word	0x08007084
 8000904:	20000160 	.word	0x20000160

08000908 <lcd_update>:

void lcd_update() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef current_time = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef current_date = {0};
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4820      	ldr	r0, [pc, #128]	@ (80009ac <lcd_update+0xa4>)
 800092c:	f003 fa78 	bl	8003e20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	481c      	ldr	r0, [pc, #112]	@ (80009ac <lcd_update+0xa4>)
 800093a:	f003 facd 	bl	8003ed8 <HAL_RTC_GetDate>

	char time_string[16] = {0};
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
	sprintf(time_string, "%02d:%02d", current_time.Hours, current_time.Minutes);
 800094c:	7d3b      	ldrb	r3, [r7, #20]
 800094e:	461a      	mov	r2, r3
 8000950:	7d7b      	ldrb	r3, [r7, #21]
 8000952:	4638      	mov	r0, r7
 8000954:	4916      	ldr	r1, [pc, #88]	@ (80009b0 <lcd_update+0xa8>)
 8000956:	f005 fd5d 	bl	8006414 <siprintf>

	u8g2_ClearBuffer(&lcd);
 800095a:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <lcd_update+0xac>)
 800095c:	f004 f895 	bl	8004a8a <u8g2_ClearBuffer>

	u8g2_SetDrawColor(&lcd, 1);
 8000960:	2101      	movs	r1, #1
 8000962:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <lcd_update+0xac>)
 8000964:	f004 ffe6 	bl	8005934 <u8g2_SetDrawColor>
	u8g2_DrawBox(&lcd, 0, 0, 128, 128);
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <lcd_update+0xac>)
 8000974:	f004 f853 	bl	8004a1e <u8g2_DrawBox>

	u8g2_SetFont(&lcd, u8g2_font_logisoso38_tn);
 8000978:	490f      	ldr	r1, [pc, #60]	@ (80009b8 <lcd_update+0xb0>)
 800097a:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <lcd_update+0xac>)
 800097c:	f004 fec6 	bl	800570c <u8g2_SetFont>
	u8g2_SetDrawColor(&lcd, 0);
 8000980:	2100      	movs	r1, #0
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <lcd_update+0xac>)
 8000984:	f004 ffd6 	bl	8005934 <u8g2_SetDrawColor>
	u8g2_DrawStr(&lcd, 8, 83, time_string);
 8000988:	463b      	mov	r3, r7
 800098a:	2253      	movs	r2, #83	@ 0x53
 800098c:	2108      	movs	r1, #8
 800098e:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <lcd_update+0xac>)
 8000990:	f004 fe1a 	bl	80055c8 <u8g2_DrawStr>

	u8g2_SendBuffer(&lcd);
 8000994:	4807      	ldr	r0, [pc, #28]	@ (80009b4 <lcd_update+0xac>)
 8000996:	f004 f8eb 	bl	8004b70 <u8g2_SendBuffer>

	HAL_GPIO_TogglePin(LCD_REFRESH_GPIO_Port, LCD_REFRESH_Pin);
 800099a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099e:	4807      	ldr	r0, [pc, #28]	@ (80009bc <lcd_update+0xb4>)
 80009a0:	f000 ffc6 	bl	8001930 <HAL_GPIO_TogglePin>
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001f4 	.word	0x200001f4
 80009b0:	08006d6c 	.word	0x08006d6c
 80009b4:	20000160 	.word	0x20000160
 80009b8:	08006e24 	.word	0x08006e24
 80009bc:	48000800 	.word	0x48000800

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fbfb 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f88d 	bl	8000ae8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ce:	f000 f8f9 	bl	8000bc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff fc3f 	bl	8000254 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80009d6:	f7ff fe39 	bl	800064c <MX_LPTIM1_Init>
  MX_RTC_Init();
 80009da:	f000 f941 	bl	8000c60 <MX_RTC_Init>
  MX_I2C1_Init();
 80009de:	f7ff fce3 	bl	80003a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009e2:	f7ff fd21 	bl	8000428 <MX_I2C3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f9c3 	bl	8000d70 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80009ea:	f000 fb31 	bl	8001050 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80009ee:	f7ff ff71 	bl	80008d4 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (!HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin)) {
 80009f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f6:	4837      	ldr	r0, [pc, #220]	@ (8000ad4 <main+0x114>)
 80009f8:	f000 ff6a 	bl	80018d0 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d125      	bne.n	8000a4e <main+0x8e>
		RTC_TimeTypeDef new_time = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
		HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482f      	ldr	r0, [pc, #188]	@ (8000ad8 <main+0x118>)
 8000a1c:	f003 fa00 	bl	8003e20 <HAL_RTC_GetTime>

		new_time.Hours = (new_time.Hours + 1) % 60;
 8000a20:	7d3b      	ldrb	r3, [r7, #20]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <main+0x11c>)
 8000a26:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	1159      	asrs	r1, r3, #5
 8000a2e:	17d3      	asrs	r3, r2, #31
 8000a30:	1ac9      	subs	r1, r1, r3
 8000a32:	460b      	mov	r3, r1
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	1a5b      	subs	r3, r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	1ad1      	subs	r1, r2, r3
 8000a3c:	b2cb      	uxtb	r3, r1
 8000a3e:	753b      	strb	r3, [r7, #20]

		HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4823      	ldr	r0, [pc, #140]	@ (8000ad8 <main+0x118>)
 8000a4a:	f003 f925 	bl	8003c98 <HAL_RTC_SetTime>
	}

	if (!HAL_GPIO_ReadPin(SW_DOWN_GPIO_Port, SW_DOWN_Pin)) {
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <main+0x114>)
 8000a52:	f000 ff3d 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d122      	bne.n	8000aa2 <main+0xe2>
		RTC_TimeTypeDef new_time = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
		HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <main+0x118>)
 8000a72:	f003 f9d5 	bl	8003e20 <HAL_RTC_GetTime>

		new_time.Minutes = (new_time.Minutes + 1) % 60;
 8000a76:	787b      	ldrb	r3, [r7, #1]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <main+0x11c>)
 8000a7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a80:	4413      	add	r3, r2
 8000a82:	1159      	asrs	r1, r3, #5
 8000a84:	17d3      	asrs	r3, r2, #31
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	1ad1      	subs	r1, r2, r3
 8000a92:	b2cb      	uxtb	r3, r1
 8000a94:	707b      	strb	r3, [r7, #1]

		HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <main+0x118>)
 8000a9e:	f003 f8fb 	bl	8003c98 <HAL_RTC_SetTime>
	}

    if (HAL_GPIO_ReadPin(SW_LIGHT_GPIO_Port, SW_LIGHT_Pin)) {
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <main+0x120>)
 8000aa6:	f000 ff13 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <main+0xfc>
//      HAL_GPIO_WritePin(LIGHT_EN_GPIO_Port, LIGHT_EN_Pin, (GPIO_PinState)1);
    	HAL_LPTIM_PWM_Start(&hlptim1, 100, 95);
 8000ab0:	225f      	movs	r2, #95	@ 0x5f
 8000ab2:	2164      	movs	r1, #100	@ 0x64
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <main+0x124>)
 8000ab6:	f001 f929 	bl	8001d0c <HAL_LPTIM_PWM_Start>
 8000aba:	e004      	b.n	8000ac6 <main+0x106>
    } else {
//      HAL_GPIO_WritePin(LIGHT_EN_GPIO_Port, LIGHT_EN_Pin, (GPIO_PinState)0);
    	HAL_LPTIM_PWM_Start(&hlptim1, 100, 100);
 8000abc:	2264      	movs	r2, #100	@ 0x64
 8000abe:	2164      	movs	r1, #100	@ 0x64
 8000ac0:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <main+0x124>)
 8000ac2:	f001 f923 	bl	8001d0c <HAL_LPTIM_PWM_Start>
    }

    lcd_update();
 8000ac6:	f7ff ff1f 	bl	8000908 <lcd_update>
    HAL_Delay(100);
 8000aca:	2064      	movs	r0, #100	@ 0x64
 8000acc:	f000 fbfe 	bl	80012cc <HAL_Delay>
	if (!HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin)) {
 8000ad0:	e78f      	b.n	80009f2 <main+0x32>
 8000ad2:	bf00      	nop
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	200001f4 	.word	0x200001f4
 8000adc:	88888889 	.word	0x88888889
 8000ae0:	48001c00 	.word	0x48001c00
 8000ae4:	20000128 	.word	0x20000128

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	@ 0x68
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2248      	movs	r2, #72	@ 0x48
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 fcac 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b16:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000b2a:	232e      	movs	r3, #46	@ 0x2e
 8000b2c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2340      	movs	r3, #64	@ 0x40
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b44:	2360      	movs	r3, #96	@ 0x60
 8000b46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b50:	2301      	movs	r3, #1
 8000b52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b66:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fdbc 	bl	80026f0 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b7e:	f000 f83e 	bl	8000bfe <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b82:	236f      	movs	r3, #111	@ 0x6f
 8000b84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2303      	movs	r3, #3
 8000b88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000b96:	2380      	movs	r3, #128	@ 0x80
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 f918 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bae:	f000 f826 	bl	8000bfe <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bb2:	f002 fea9 	bl	8003908 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bb6:	bf00      	nop
 8000bb8:	3768      	adds	r7, #104	@ 0x68
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58000400 	.word	0x58000400

08000bc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2250      	movs	r2, #80	@ 0x50
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 fc3f 	bl	8006454 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bda:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000be0:	2310      	movs	r3, #16
 8000be2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fd18 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000bf2:	f000 f804 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	@ 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c02:	b672      	cpsid	i
}
 8000c04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <Error_Handler+0x8>

08000c0a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_APB1_GRP1_EnableClock>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c64:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <MX_RTC_Init+0x4c>)
 8000c68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c72:	227f      	movs	r2, #127	@ 0x7f
 8000c74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c78:	22ff      	movs	r2, #255	@ 0xff
 8000c7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_RTC_Init+0x48>)
 8000c96:	f002 ff4f 	bl	8003b38 <HAL_RTC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000ca0:	f7ff ffad 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001f4 	.word	0x200001f4
 8000cac:	40002800 	.word	0x40002800

08000cb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b096      	sub	sp, #88	@ 0x58
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2250      	movs	r2, #80	@ 0x50
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fbc7 	bl	8006454 <memset>
  if(rtcHandle->Instance==RTC)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <HAL_RTC_MspInit+0x58>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d117      	bne.n	8000d00 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000cd0:	f001 f992 	bl	8001ff8 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cde:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fc99 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000cf0:	f7ff ff85 	bl	8000bfe <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf4:	f7ff ff89 	bl	8000c0a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cf8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000cfc:	f7ff ff96 	bl	8000c2c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3758      	adds	r7, #88	@ 0x58
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40002800 	.word	0x40002800

08000d0c <LL_AHB2_GRP1_EnableClock>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_SPI1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000da6:	2218      	movs	r2, #24
 8000da8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_SPI1_Init+0x74>)
 8000dd0:	f003 f95b 	bl	800408a <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f7ff ff10 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000218 	.word	0x20000218
 8000de8:	40013000 	.word	0x40013000

08000dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <HAL_SPI_MspInit+0x68>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d11e      	bne.n	8000e4c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e12:	f7ff ff94 	bl	8000d3e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff ff78 	bl	8000d0c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000e1c:	2328      	movs	r3, #40	@ 0x28
 8000e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <HAL_SPI_MspInit+0x6c>)
 8000e38:	f000 fbda 	bl	80015f0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2022      	movs	r0, #34	@ 0x22
 8000e42:	f000 fb42 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e46:	2022      	movs	r0, #34	@ 0x22
 8000e48:	f000 fb59 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013000 	.word	0x40013000
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6e:	bf00      	nop
 8000e70:	e7fd      	b.n	8000e6e <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <HardFault_Handler+0x4>

08000e7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	bf00      	nop
 8000e88:	e7fd      	b.n	8000e86 <BusFault_Handler+0x4>

08000e8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8e:	bf00      	nop
 8000e90:	e7fd      	b.n	8000e8e <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f9d8 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <SPI1_IRQHandler+0x10>)
 8000ece:	f003 faf5 	bl	80044bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000218 	.word	0x20000218

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f005 faaa 	bl	8006464 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20030000 	.word	0x20030000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	2000027c 	.word	0x2000027c
 8000f44:	20000ea8 	.word	0x20000ea8

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <SystemInit+0x98>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f52:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <SystemInit+0x98>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f70:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f74:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <SystemInit+0x9c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f92:	f023 0305 	bic.w	r3, r3, #5
 8000f96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <SystemInit+0xa0>)
 8000fb4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <SystemInit+0xa0>)
 8000fbc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	faf6fefb 	.word	0xfaf6fefb
 8000fe8:	22041000 	.word	0x22041000

08000fec <LL_AHB2_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_APB1_GRP1_EnableClock>:
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800102c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4313      	orrs	r3, r2
 8001034:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <MX_USB_PCD_Init+0x4c>)
 8001058:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 800105c:	2208      	movs	r2, #8
 800105e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001062:	2202      	movs	r2, #2
 8001064:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001068:	2202      	movs	r2, #2
 800106a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 800106e:	2200      	movs	r2, #0
 8001070:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001074:	2200      	movs	r2, #0
 8001076:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 800107a:	2200      	movs	r2, #0
 800107c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001080:	2200      	movs	r2, #0
 8001082:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_USB_PCD_Init+0x48>)
 8001086:	f000 febf 	bl	8001e08 <HAL_PCD_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001090:	f7ff fdb5 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000280 	.word	0x20000280
 800109c:	40006800 	.word	0x40006800

080010a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09c      	sub	sp, #112	@ 0x70
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2250      	movs	r2, #80	@ 0x50
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f9c7 	bl	8006454 <memset>
  if(pcdHandle->Instance==USB)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001148 <HAL_PCD_MspInit+0xa8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d136      	bne.n	800113e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80010d6:	2318      	movs	r3, #24
 80010d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80010da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80010e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80010e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80010ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fa8d 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001108:	f7ff fd79 	bl	8000bfe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff6d 	bl	8000fec <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001112:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001116:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001124:	230a      	movs	r3, #10
 8001126:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001132:	f000 fa5d 	bl	80015f0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001136:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800113a:	f7ff ff70 	bl	800101e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3770      	adds	r7, #112	@ 0x70
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40006800 	.word	0x40006800

0800114c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800114c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001150:	3304      	adds	r3, #4

08001152 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001152:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001154:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001156:	d3f9      	bcc.n	800114c <CopyDataInit>
  bx lr
 8001158:	4770      	bx	lr

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800115a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800115c:	3004      	adds	r0, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800115e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
  bx lr
 8001162:	4770      	bx	lr

08001164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001166:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001168:	f7ff feee 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <LoopForever+0x6>)
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LoopForever+0xa>)
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <LoopForever+0xe>)
 8001172:	2300      	movs	r3, #0
 8001174:	f7ff ffed 	bl	8001152 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <LoopForever+0x12>)
 800117a:	490c      	ldr	r1, [pc, #48]	@ (80011ac <LoopForever+0x16>)
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <LoopForever+0x1a>)
 800117e:	2300      	movs	r3, #0
 8001180:	f7ff ffe7 	bl	8001152 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <LoopForever+0x1e>)
 8001186:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <LoopForever+0x22>)
 8001188:	2300      	movs	r3, #0
 800118a:	f7ff ffe8 	bl	800115e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118e:	f005 f96f 	bl	8006470 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001192:	f7ff fc15 	bl	80009c0 <main>

08001196 <LoopForever>:

LoopForever:
  b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   r0, =_estack
 8001198:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000064 	.word	0x20000064
 80011a4:	080070ec 	.word	0x080070ec
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011a8:	20030000 	.word	0x20030000
 80011ac:	20030000 	.word	0x20030000
 80011b0:	08007148 	.word	0x08007148
  INIT_BSS _sbss, _ebss
 80011b4:	20000064 	.word	0x20000064
 80011b8:	20000ea8 	.word	0x20000ea8

080011bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_Init+0x3c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_Init+0x3c>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 f96c 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011dc:	200f      	movs	r0, #15
 80011de:	f000 f80f 	bl	8001200 <HAL_InitTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	e001      	b.n	80011f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ee:	f7ff fe35 	bl	8000e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58004000 	.word	0x58004000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d024      	beq.n	800125e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	f001 ff8e 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8001218:	4602      	mov	r2, r0
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_InitTick+0x6c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001224:	fbb3 f3f1 	udiv	r3, r3, r1
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f974 	bl	800151a <HAL_SYSTICK_Config>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10f      	bne.n	8001258 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d809      	bhi.n	8001252 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123e:	2200      	movs	r2, #0
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	f000 f940 	bl	80014ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124a:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <HAL_InitTick+0x70>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e007      	b.n	8001262 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e004      	b.n	8001262 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000010 	.word	0x20000010
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000010 	.word	0x20000010
 8001298:	2000055c 	.word	0x2000055c

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000055c 	.word	0x2000055c

080012b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTickPrio+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffe2 	bl	800129c <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffd2 	bl	800129c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000010 	.word	0x20000010

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff40 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff33 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa4 	bl	8001470 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d005      	beq.n	8001556 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e047      	b.n	80015e6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 020e 	bic.w	r2, r2, #14
 8001564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 021c 	and.w	r2, r3, #28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00c      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
    }
  }
  return status;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e14c      	b.n	800189a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 813e 	beq.w	8001894 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8098 	beq.w	8001894 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a54      	ldr	r2, [pc, #336]	@ (80018b8 <HAL_GPIO_Init+0x2c8>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800178e:	d019      	beq.n	80017c4 <HAL_GPIO_Init+0x1d4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a4a      	ldr	r2, [pc, #296]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d013      	beq.n	80017c0 <HAL_GPIO_Init+0x1d0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a49      	ldr	r2, [pc, #292]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1cc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <HAL_GPIO_Init+0x2d4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1c8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a47      	ldr	r2, [pc, #284]	@ (80018c8 <HAL_GPIO_Init+0x2d8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1c4>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e008      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017b4:	2307      	movs	r3, #7
 80017b6:	e006      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017bc:	2302      	movs	r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017c4:	2300      	movs	r3, #0
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d6:	4938      	ldr	r1, [pc, #224]	@ (80018b8 <HAL_GPIO_Init+0x2c8>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e4:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001808:	4a30      	ldr	r2, [pc, #192]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001832:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800185e:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 8001868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a0f      	ldr	r2, [pc, #60]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f aeab 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40010000 	.word	0x40010000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48000c00 	.word	0x48000c00
 80018c8:	48001000 	.word	0x48001000
 80018cc:	58000800 	.word	0x58000800

080018d0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43d9      	mvns	r1, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	400b      	ands	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e08d      	b.n	8001a92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fd8c 	bl	80004a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2224      	movs	r2, #36	@ 0x24
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e006      	b.n	80019ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d108      	bne.n	8001a06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	e007      	b.n	8001a16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69d9      	ldr	r1, [r3, #28]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d138      	bne.n	8001b22 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e032      	b.n	8001b24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d139      	bne.n	8001bba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e033      	b.n	8001bbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	@ 0x24
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e08f      	b.n	8001cfa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7fe fd55 	bl	80006a4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d004      	beq.n	8001c1c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c1a:	d103      	bne.n	8001c24 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 031e 	bic.w	r3, r3, #30
 8001c22:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d005      	beq.n	8001c3c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001c36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <HAL_LPTIM_Init+0x13c>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c4c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001c52:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8001c58:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001c5e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d004      	beq.n	8001c90 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c8e:	d107      	bne.n	8001ca0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00a      	beq.n	8001cc2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001cb4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001cba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <HAL_LPTIM_Init+0x140>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	621a      	str	r2, [r3, #32]
 8001ce4:	e004      	b.n	8001cf0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cee:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	ff19f1fe 	.word	0xff19f1fe
 8001d08:	40007c00 	.word	0x40007c00

08001d0c <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001d50:	2110      	movs	r1, #16
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f828 	bl	8001da8 <LPTIM_WaitForFlag>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d101      	bne.n	8001d62 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e01d      	b.n	8001d9e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2208      	movs	r2, #8
 8001d68:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001d72:	2108      	movs	r1, #8
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f817 	bl	8001da8 <LPTIM_WaitForFlag>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d101      	bne.n	8001d84 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e00c      	b.n	8001d9e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0204 	orr.w	r2, r2, #4
 8001d92:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <LPTIM_WaitForFlag+0x58>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <LPTIM_WaitForFlag+0x5c>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0b9b      	lsrs	r3, r3, #14
 8001dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4013      	ands	r3, r2
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d002      	beq.n	8001df2 <LPTIM_WaitForFlag+0x4a>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ec      	bne.n	8001dcc <LPTIM_WaitForFlag+0x24>

  return result;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000008 	.word	0x20000008
 8001e04:	d1b71759 	.word	0xd1b71759

08001e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0c0      	b.n	8001f9c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff f936 	bl	80010a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fdb3 	bl	80049ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e03e      	b.n	8001eca <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3311      	adds	r3, #17
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3310      	adds	r3, #16
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3313      	adds	r3, #19
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3320      	adds	r3, #32
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3324      	adds	r3, #36	@ 0x24
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	791b      	ldrb	r3, [r3, #4]
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3bb      	bcc.n	8001e4c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e044      	b.n	8001f64 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3301      	adds	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	791b      	ldrb	r3, [r3, #4]
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3b5      	bcc.n	8001eda <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f7a:	f002 fd32 	bl	80049e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7a9b      	ldrb	r3, [r3, #10]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f805 	bl	8001fa4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	58000400 	.word	0x58000400

08002018 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_PWREx_GetVoltageRange+0x18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	58000400 	.word	0x58000400

08002034 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002046:	d101      	bne.n	800204c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_RCC_HSE_Enable>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_RCC_HSE_Disable>:
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_HSE_IsReady>:
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020a6:	d101      	bne.n	80020ac <LL_RCC_HSE_IsReady+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_RCC_HSE_IsReady+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_HSI_Enable>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_HSI_Disable>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_HSI_IsReady>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d101      	bne.n	800210c <LL_RCC_HSI_IsReady+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_HSI_IsReady+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_HSI48_Enable>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_HSI48_Disable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_HSI48_IsReady>:
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d101      	bne.n	800219e <LL_RCC_HSI48_IsReady+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_RCC_HSI48_IsReady+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_LSE_Enable>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_RCC_LSE_Disable>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSE_EnableBypass>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_LSE_DisableBypass>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_RCC_LSE_IsReady>:
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d101      	bne.n	800224a <LL_RCC_LSE_IsReady+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_RCC_LSE_IsReady+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_LSI1_Enable>:
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_LSI1_Disable>:
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_LSI1_IsReady>:
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d101      	bne.n	80022b2 <LL_RCC_LSI1_IsReady+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_RCC_LSI1_IsReady+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_LSI2_Enable>:
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_LSI2_Disable>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_LSI2_IsReady>:
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b08      	cmp	r3, #8
 8002314:	d101      	bne.n	800231a <LL_RCC_LSI2_IsReady+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_RCC_LSI2_IsReady+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_RCC_LSI2_SetTrimming>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002336:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_RCC_MSI_Enable>:
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_RCC_MSI_Disable>:
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6013      	str	r3, [r2, #0]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_RCC_MSI_IsReady>:
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d101      	bne.n	80023a6 <LL_RCC_MSI_IsReady+0x16>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_RCC_MSI_IsReady+0x18>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_RCC_MSI_SetRange>:
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RCC_MSI_GetRange>:
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2bb0      	cmp	r3, #176	@ 0xb0
 80023f0:	d901      	bls.n	80023f6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80023f2:	23b0      	movs	r3, #176	@ 0xb0
 80023f4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80023f6:	687b      	ldr	r3, [r7, #4]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_RCC_SetSysClkSource>:
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 0203 	bic.w	r2, r3, #3
 8002440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_RCC_GetSysClkSource>:
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_RCC_SetAHBPrescaler>:
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_RCC_SetAHB4Prescaler>:
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_SetAPB1Prescaler>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_RCC_SetAPB2Prescaler>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800252a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_RCC_GetAHBPrescaler>:
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_RCC_GetAHB4Prescaler>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002560:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025c2:	d101      	bne.n	80025c8 <LL_RCC_PLL_IsReady+0x18>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <LL_RCC_PLL_IsReady+0x1a>
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0303 	and.w	r3, r3, #3
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002648:	d101      	bne.n	800264e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002662:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800266e:	d101      	bne.n	8002674 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002688:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800268c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d101      	bne.n	800269a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026b8:	d101      	bne.n	80026be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026dc:	d101      	bne.n	80026e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b08d      	sub	sp, #52	@ 0x34
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e363      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808d 	beq.w	800282a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002710:	f7ff fea1 	bl	8002456 <LL_RCC_GetSysClkSource>
 8002714:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002716:	f7ff ff82 	bl	800261e <LL_RCC_PLL_GetMainSource>
 800271a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x3e>
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d147      	bne.n	80027b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272a:	2b01      	cmp	r3, #1
 800272c:	d144      	bne.n	80027b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e347      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800273e:	f7ff fe4c 	bl	80023da <LL_RCC_MSI_GetRange>
 8002742:	4603      	mov	r3, r0
 8002744:	429c      	cmp	r4, r3
 8002746:	d914      	bls.n	8002772 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fd05 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e336      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe26 	bl	80023b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fe4a 	bl	8002404 <LL_RCC_MSI_SetCalibTrimming>
 8002770:	e013      	b.n	800279a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe1b 	bl	80023b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fe3f 	bl	8002404 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fce6 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e317      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800279a:	f000 fccb 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 800279e:	4603      	mov	r3, r0
 80027a0:	4aa4      	ldr	r2, [pc, #656]	@ (8002a34 <HAL_RCC_OscConfig+0x344>)
 80027a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a4:	4ba4      	ldr	r3, [pc, #656]	@ (8002a38 <HAL_RCC_OscConfig+0x348>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fd29 	bl	8001200 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d039      	beq.n	8002828 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e308      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01e      	beq.n	80027fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027c0:	f7ff fdc8 	bl	8002354 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fd6a 	bl	800129c <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027cc:	f7fe fd66 	bl	800129c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e2f5      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80027de:	f7ff fdd7 	bl	8002390 <LL_RCC_MSI_IsReady>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f1      	beq.n	80027cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fde0 	bl	80023b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe04 	bl	8002404 <LL_RCC_MSI_SetCalibTrimming>
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027fe:	f7ff fdb8 	bl	8002372 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002802:	f7fe fd4b 	bl	800129c <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280a:	f7fe fd47 	bl	800129c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e2d6      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800281c:	f7ff fdb8 	bl	8002390 <LL_RCC_MSI_IsReady>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f1      	bne.n	800280a <HAL_RCC_OscConfig+0x11a>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002828:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d047      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	f7ff fe0e 	bl	8002456 <LL_RCC_GetSysClkSource>
 800283a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800283c:	f7ff feef 	bl	800261e <LL_RCC_PLL_GetMainSource>
 8002840:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x164>
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d134      	bne.n	80028c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e2b4      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0x180>
 800286a:	f7ff fbf5 	bl	8002058 <LL_RCC_HSE_Enable>
 800286e:	e001      	b.n	8002874 <HAL_RCC_OscConfig+0x184>
 8002870:	f7ff fc01 	bl	8002076 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d012      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fd0e 	bl	800129c <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fd0a 	bl	800129c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e299      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002896:	f7ff fbfd 	bl	8002094 <LL_RCC_HSE_IsReady>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f1      	beq.n	8002884 <HAL_RCC_OscConfig+0x194>
 80028a0:	e011      	b.n	80028c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fcfb 	bl	800129c <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028aa:	f7fe fcf7 	bl	800129c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	@ 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e286      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80028bc:	f7ff fbea 	bl	8002094 <LL_RCC_HSE_IsReady>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f1      	bne.n	80028aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04c      	beq.n	800296c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	f7ff fdc0 	bl	8002456 <LL_RCC_GetSysClkSource>
 80028d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	f7ff fea1 	bl	800261e <LL_RCC_PLL_GetMainSource>
 80028dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d10e      	bne.n	8002908 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d10b      	bne.n	8002908 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e266      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fc09 	bl	8002118 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002906:	e031      	b.n	800296c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d019      	beq.n	8002944 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	f7ff fbd2 	bl	80020b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fcc2 	bl	800129c <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fcbe 	bl	800129c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e24d      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800292e:	f7ff fbe1 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f1      	beq.n	800291c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fbeb 	bl	8002118 <LL_RCC_HSI_SetCalibTrimming>
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002944:	f7ff fbc7 	bl	80020d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fca8 	bl	800129c <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002950:	f7fe fca4 	bl	800129c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e233      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002962:	f7ff fbc7 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f1      	bne.n	8002950 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a3 	beq.w	8002acc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d076      	beq.n	8002a7c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d046      	beq.n	8002a28 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800299a:	f7ff fc7e 	bl	800229a <LL_RCC_LSI1_IsReady>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80029a4:	f7ff fc57 	bl	8002256 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a8:	f7fe fc78 	bl	800129c <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029b0:	f7fe fc74 	bl	800129c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e203      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029c2:	f7ff fc6a 	bl	800229a <LL_RCC_LSI1_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f1      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80029cc:	f7ff fc77 	bl	80022be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fc64 	bl	800129c <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029d8:	f7fe fc60 	bl	800129c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1ef      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029ea:	f7ff fc8a 	bl	8002302 <LL_RCC_LSI2_IsReady>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f1      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fc94 	bl	8002326 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029fe:	f7ff fc3b 	bl	8002278 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fc4b 	bl	800129c <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a0a:	f7fe fc47 	bl	800129c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1d6      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a1c:	f7ff fc3d 	bl	800229a <LL_RCC_LSI1_IsReady>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f1      	bne.n	8002a0a <HAL_RCC_OscConfig+0x31a>
 8002a26:	e051      	b.n	8002acc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a28:	f7ff fc15 	bl	8002256 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc36 	bl	800129c <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a32:	e00c      	b.n	8002a4e <HAL_RCC_OscConfig+0x35e>
 8002a34:	20000008 	.word	0x20000008
 8002a38:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a3c:	f7fe fc2e 	bl	800129c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1bd      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a4e:	f7ff fc24 	bl	800229a <LL_RCC_LSI1_IsReady>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f1      	beq.n	8002a3c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a58:	f7ff fc42 	bl	80022e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a5e:	f7fe fc1d 	bl	800129c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1ac      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a70:	f7ff fc47 	bl	8002302 <LL_RCC_LSI2_IsReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f1      	bne.n	8002a5e <HAL_RCC_OscConfig+0x36e>
 8002a7a:	e027      	b.n	8002acc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a7c:	f7ff fc30 	bl	80022e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe fc0c 	bl	800129c <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a88:	f7fe fc08 	bl	800129c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e197      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a9a:	f7ff fc32 	bl	8002302 <LL_RCC_LSI2_IsReady>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f1      	bne.n	8002a88 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002aa4:	f7ff fbe8 	bl	8002278 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fbf8 	bl	800129c <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ab0:	f7fe fbf4 	bl	800129c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e183      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ac2:	f7ff fbea 	bl	800229a <LL_RCC_LSI1_IsReady>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f1      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad8:	4ba7      	ldr	r3, [pc, #668]	@ (8002d78 <HAL_RCC_OscConfig+0x688>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ae4:	f7ff fa88 	bl	8001ff8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fbd8 	bl	800129c <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fbd4 	bl	800129c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e163      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	4b9d      	ldr	r3, [pc, #628]	@ (8002d78 <HAL_RCC_OscConfig+0x688>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_OscConfig+0x42c>
 8002b16:	f7ff fb48 	bl	80021aa <LL_RCC_LSE_Enable>
 8002b1a:	e00c      	b.n	8002b36 <HAL_RCC_OscConfig+0x446>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d104      	bne.n	8002b2e <HAL_RCC_OscConfig+0x43e>
 8002b24:	f7ff fb63 	bl	80021ee <LL_RCC_LSE_EnableBypass>
 8002b28:	f7ff fb3f 	bl	80021aa <LL_RCC_LSE_Enable>
 8002b2c:	e003      	b.n	8002b36 <HAL_RCC_OscConfig+0x446>
 8002b2e:	f7ff fb4d 	bl	80021cc <LL_RCC_LSE_Disable>
 8002b32:	f7ff fb6d 	bl	8002210 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fbad 	bl	800129c <HAL_GetTick>
 8002b42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fba9 	bl	800129c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e136      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b5c:	f7ff fb69 	bl	8002232 <LL_RCC_LSE_IsReady>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCC_OscConfig+0x456>
 8002b66:	e013      	b.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fb98 	bl	800129c <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fb94 	bl	800129c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e121      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b86:	f7ff fb54 	bl	8002232 <LL_RCC_LSE_IsReady>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d014      	beq.n	8002bce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ba4:	f7ff facd 	bl	8002142 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fb78 	bl	800129c <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb0:	f7fe fb74 	bl	800129c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e103      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002bc2:	f7ff fae0 	bl	8002186 <LL_RCC_HSI48_IsReady>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f1      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4c0>
 8002bcc:	e013      	b.n	8002bf6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	f7ff fac9 	bl	8002164 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fb63 	bl	800129c <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bda:	f7fe fb5f 	bl	800129c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0ee      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002bec:	f7ff facb 	bl	8002186 <LL_RCC_HSI48_IsReady>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f1      	bne.n	8002bda <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80e4 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	f7ff fc29 	bl	8002456 <LL_RCC_GetSysClkSource>
 8002c04:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	f040 80b4 	bne.w	8002d80 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0203 	and.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d123      	bne.n	8002c6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d11c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d114      	bne.n	8002c6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d05d      	beq.n	8002d2a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d058      	beq.n	8002d26 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0a1      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c86:	f7ff fc84 	bl	8002592 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8a:	f7fe fb07 	bl	800129c <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fb03 	bl	800129c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e092      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <HAL_RCC_OscConfig+0x68c>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ce8:	f7ff fc44 	bl	8002574 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cfc:	f7fe face 	bl	800129c <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe faca 	bl	800129c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e059      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	e050      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e04f      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d147      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d38:	f7ff fc1c 	bl	8002574 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d4c:	f7fe faa6 	bl	800129c <HAL_GetTick>
 8002d50:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe faa2 	bl	800129c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e031      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ef      	beq.n	8002d54 <HAL_RCC_OscConfig+0x664>
 8002d74:	e028      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6d8>
 8002d76:	bf00      	nop
 8002d78:	58000400 	.word	0x58000400
 8002d7c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d01e      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	f7ff fc04 	bl	8002592 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fa87 	bl	800129c <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fa83 	bl	800129c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e012      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ef      	bne.n	8002d92 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_RCC_OscConfig+0x6e4>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60cb      	str	r3, [r1, #12]
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3734      	adds	r7, #52	@ 0x34
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	eefefffc 	.word	0xeefefffc

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e12d      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b98      	ldr	r3, [pc, #608]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d91b      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b95      	ldr	r3, [pc, #596]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	4993      	ldr	r1, [pc, #588]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0a:	f7fe fa47 	bl	800129c <HAL_GetTick>
 8002e0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e12:	f7fe fa43 	bl	800129c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e111      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	4b8a      	ldr	r3, [pc, #552]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1ef      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fb13 	bl	800246e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fa28 	bl	800129c <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e50:	f7fe fa24 	bl	800129c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0f2      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e62:	f7ff fbe8 	bl	8002636 <LL_RCC_IsActiveFlag_HPRE>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f1      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fb0a 	bl	8002496 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e82:	f7fe fa0b 	bl	800129c <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e8a:	f7fe fa07 	bl	800129c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0d5      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e9c:	f7ff fbdd 	bl	800265a <LL_RCC_IsActiveFlag_C2HPRE>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f1      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fb03 	bl	80024c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe f9ee 	bl	800129c <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ec4:	f7fe f9ea 	bl	800129c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0b8      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ed6:	f7ff fbd3 	bl	8002680 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f1      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d016      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fafd 	bl	80024f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe f9d1 	bl	800129c <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002efe:	f7fe f9cd 	bl	800129c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e09b      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f10:	f7ff fbc9 	bl	80026a6 <LL_RCC_IsActiveFlag_PPRE1>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f1      	beq.n	8002efe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff faf3 	bl	8002518 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f32:	f7fe f9b3 	bl	800129c <HAL_GetTick>
 8002f36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f3a:	f7fe f9af 	bl	800129c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e07d      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f4c:	f7ff fbbd 	bl	80026ca <LL_RCC_IsActiveFlag_PPRE2>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f1      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d043      	beq.n	8002fea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f6a:	f7ff f893 	bl	8002094 <LL_RCC_HSE_IsReady>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11e      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e067      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f80:	f7ff fb16 	bl	80025b0 <LL_RCC_PLL_IsReady>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d113      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e05c      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f96:	f7ff f9fb 	bl	8002390 <LL_RCC_MSI_IsReady>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e051      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002fa4:	f7ff f8a6 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e04a      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fa39 	bl	800242e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f96e 	bl	800129c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe f96a 	bl	800129c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e036      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	f7ff fa3c 	bl	8002456 <LL_RCC_GetSysClkSource>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d1ec      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fea:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d21b      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0207 	bic.w	r2, r3, #7
 8003000:	4913      	ldr	r1, [pc, #76]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003008:	f7fe f948 	bl	800129c <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	e008      	b.n	8003022 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003010:	f7fe f944 	bl	800129c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e012      	b.n	8003048 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x278>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d1ef      	bne.n	8003010 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003030:	f000 f880 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003034:	4603      	mov	r3, r0
 8003036:	4a07      	ldr	r2, [pc, #28]	@ (8003054 <HAL_RCC_ClockConfig+0x27c>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800303a:	f7fe f93b 	bl	80012b4 <HAL_GetTickPrio>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe f8dd 	bl	8001200 <HAL_InitTick>
 8003046:	4603      	mov	r3, r0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	58004000 	.word	0x58004000
 8003054:	20000008 	.word	0x20000008

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305e:	f7ff f9fa 	bl	8002456 <LL_RCC_GetSysClkSource>
 8003062:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800306a:	f7ff f9b6 	bl	80023da <LL_RCC_MSI_GetRange>
 800306e:	4603      	mov	r3, r0
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a2b      	ldr	r2, [pc, #172]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e04b      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d102      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e045      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d10a      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003092:	f7fe ffcf 	bl	8002034 <LL_RCC_HSE_IsEnabledDiv2>
 8003096:	4603      	mov	r3, r0
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800309c:	4b23      	ldr	r3, [pc, #140]	@ (800312c <HAL_RCC_GetSysClockFreq+0xd4>)
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e03a      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xd8>)
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e037      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80030a8:	f7ff fab9 	bl	800261e <LL_RCC_PLL_GetMainSource>
 80030ac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d003      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x64>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x6a>
 80030ba:	e00d      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030be:	60bb      	str	r3, [r7, #8]
        break;
 80030c0:	e015      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030c2:	f7fe ffb7 	bl	8002034 <LL_RCC_HSE_IsEnabledDiv2>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80030cc:	4b17      	ldr	r3, [pc, #92]	@ (800312c <HAL_RCC_GetSysClockFreq+0xd4>)
 80030ce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80030d0:	e00d      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80030d2:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xd8>)
 80030d4:	60bb      	str	r3, [r7, #8]
        break;
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030d8:	f7ff f97f 	bl	80023da <LL_RCC_MSI_GetRange>
 80030dc:	4603      	mov	r3, r0
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	60bb      	str	r3, [r7, #8]
        break;
 80030ec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80030ee:	f7ff fa71 	bl	80025d4 <LL_RCC_PLL_GetN>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	fb03 f402 	mul.w	r4, r3, r2
 80030fa:	f7ff fa84 	bl	8002606 <LL_RCC_PLL_GetDivider>
 80030fe:	4603      	mov	r3, r0
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	3301      	adds	r3, #1
 8003104:	fbb4 f4f3 	udiv	r4, r4, r3
 8003108:	f7ff fa71 	bl	80025ee <LL_RCC_PLL_GetR>
 800310c:	4603      	mov	r3, r0
 800310e:	0f5b      	lsrs	r3, r3, #29
 8003110:	3301      	adds	r3, #1
 8003112:	fbb4 f3f3 	udiv	r3, r4, r3
 8003116:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003118:	68fb      	ldr	r3, [r7, #12]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	08006de4 	.word	0x08006de4
 8003128:	00f42400 	.word	0x00f42400
 800312c:	003d0900 	.word	0x003d0900
 8003130:	007a1200 	.word	0x007a1200

08003134 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b598      	push	{r3, r4, r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003138:	f7ff ff8e 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 800313c:	4604      	mov	r4, r0
 800313e:	f7ff f9ff 	bl	8002540 <LL_RCC_GetAHBPrescaler>
 8003142:	4603      	mov	r3, r0
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a03      	ldr	r2, [pc, #12]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x24>)
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd98      	pop	{r3, r4, r7, pc}
 8003158:	08006da4 	.word	0x08006da4

0800315c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2bb0      	cmp	r3, #176	@ 0xb0
 8003168:	d903      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e007      	b.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a11      	ldr	r2, [pc, #68]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003182:	f7ff f9e9 	bl	8002558 <LL_RCC_GetAHB4Prescaler>
 8003186:	4603      	mov	r3, r0
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	0c9c      	lsrs	r4, r3, #18
 80031a6:	f7fe ff37 	bl	8002018 <HAL_PWREx_GetVoltageRange>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4619      	mov	r1, r3
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 f80c 	bl	80031cc <RCC_SetFlashLatency>
 80031b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	bf00      	nop
 80031c0:	08006de4 	.word	0x08006de4
 80031c4:	08006da4 	.word	0x08006da4
 80031c8:	431bde83 	.word	0x431bde83

080031cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b093      	sub	sp, #76	@ 0x4c
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031d6:	4b37      	ldr	r3, [pc, #220]	@ (80032b4 <RCC_SetFlashLatency+0xe8>)
 80031d8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80031dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031e2:	4a35      	ldr	r2, [pc, #212]	@ (80032b8 <RCC_SetFlashLatency+0xec>)
 80031e4:	f107 031c 	add.w	r3, r7, #28
 80031e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031ee:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <RCC_SetFlashLatency+0xf0>)
 80031f0:	f107 040c 	add.w	r4, r7, #12
 80031f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031fa:	2300      	movs	r3, #0
 80031fc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003204:	d11a      	bne.n	800323c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003206:	2300      	movs	r3, #0
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
 800320a:	e013      	b.n	8003234 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800320c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	3348      	adds	r3, #72	@ 0x48
 8003212:	443b      	add	r3, r7
 8003214:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d807      	bhi.n	800322e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800321e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3348      	adds	r3, #72	@ 0x48
 8003224:	443b      	add	r3, r7
 8003226:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800322a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800322c:	e020      	b.n	8003270 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800322e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003230:	3301      	adds	r3, #1
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40
 8003234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003236:	2b03      	cmp	r3, #3
 8003238:	d9e8      	bls.n	800320c <RCC_SetFlashLatency+0x40>
 800323a:	e019      	b.n	8003270 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003240:	e013      	b.n	800326a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3348      	adds	r3, #72	@ 0x48
 8003248:	443b      	add	r3, r7
 800324a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d807      	bhi.n	8003264 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3348      	adds	r3, #72	@ 0x48
 800325a:	443b      	add	r3, r7
 800325c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003262:	e005      	b.n	8003270 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	3301      	adds	r3, #1
 8003268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326c:	2b02      	cmp	r3, #2
 800326e:	d9e8      	bls.n	8003242 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003270:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <RCC_SetFlashLatency+0xf4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 0207 	bic.w	r2, r3, #7
 8003278:	4911      	ldr	r1, [pc, #68]	@ (80032c0 <RCC_SetFlashLatency+0xf4>)
 800327a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003280:	f7fe f80c 	bl	800129c <HAL_GetTick>
 8003284:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003286:	e008      	b.n	800329a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003288:	f7fe f808 	bl	800129c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e007      	b.n	80032aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <RCC_SetFlashLatency+0xf4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1ef      	bne.n	8003288 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	374c      	adds	r7, #76	@ 0x4c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	08006d78 	.word	0x08006d78
 80032b8:	08006d88 	.word	0x08006d88
 80032bc:	08006d94 	.word	0x08006d94
 80032c0:	58004000 	.word	0x58004000

080032c4 <LL_RCC_LSE_IsEnabled>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <LL_RCC_LSE_IsEnabled+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_RCC_LSE_IsEnabled+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_RCC_LSE_IsReady>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d101      	bne.n	8003300 <LL_RCC_LSE_IsReady+0x18>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_RCC_LSE_IsReady+0x1a>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_RCC_MSI_EnablePLLMode>:
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_RCC_SetRFWKPClockSource>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_RCC_SetSMPSClockSource>:
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4313      	orrs	r3, r2
 8003370:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_RCC_SetSMPSPrescaler>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_RCC_SetUSARTClockSource>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_RCC_SetLPUARTClockSource>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_RCC_SetI2CClockSource>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_RCC_SetLPTIMClockSource>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003444:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_RCC_SetSAIClockSource>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_RCC_SetRNGClockSource>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80034ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_RCC_SetCLK48ClockSource>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_SetUSBClockSource>:
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ffe3 	bl	80034c4 <LL_RCC_SetCLK48ClockSource>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <LL_RCC_SetADCClockSource>:
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800351a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_RCC_SetRTCClockSource>:
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_GetRTCClockSource>:
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_RCC_ForceBackupDomainReset>:
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_ReleaseBackupDomainReset>:
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_RCC_PLLSAI1_Enable>:
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_RCC_PLLSAI1_Disable>:
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ec:	6013      	str	r3, [r2, #0]
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_RCC_PLLSAI1_IsReady>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360a:	d101      	bne.n	8003610 <LL_RCC_PLLSAI1_IsReady+0x18>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003624:	2300      	movs	r3, #0
 8003626:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003628:	2300      	movs	r3, #0
 800362a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d034      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003640:	d021      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003642:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003646:	d81b      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003648:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800364c:	d01d      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800364e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003652:	d815      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800365c:	d110      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800366e:	e00d      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f94d 	bl	8003914 <RCCEx_PLLSAI1_ConfigNP>
 800367a:	4603      	mov	r3, r0
 800367c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800367e:	e005      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	77fb      	strb	r3, [r7, #31]
        break;
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	7ffb      	ldrb	r3, [r7, #31]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fee8 	bl	800346c <LL_RCC_SetSAIClockSource>
 800369c:	e001      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d046      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80036ae:	f7ff ff56 	bl	800355e <LL_RCC_GetRTCClockSource>
 80036b2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d03c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036be:	f7fe fc9b 	bl	8001ff8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff30 	bl	8003532 <LL_RCC_SetRTCClockSource>
 80036d2:	e02e      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036dc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80036de:	f7ff ff4b 	bl	8003578 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80036e2:	f7ff ff5a 	bl	800359a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036fe:	f7ff fde1 	bl	80032c4 <LL_RCC_LSE_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003708:	f7fd fdc8 	bl	800129c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800370e:	e00b      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd fdc4 	bl	800129c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d902      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	77fb      	strb	r3, [r7, #31]
              break;
 8003726:	e004      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003728:	f7ff fdde 	bl	80032e8 <LL_RCC_LSE_IsReady>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d1ee      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	77bb      	strb	r3, [r7, #30]
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fe2a 	bl	80033a6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe35 	bl	80033d2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fe5d 	bl	8003438 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fe52 	bl	8003438 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe2a 	bl	80033fe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fe1f 	bl	80033fe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d022      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fe8d 	bl	80034f0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037de:	d107      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f8:	d10b      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f8e3 	bl	80039ca <RCCEx_PLLSAI1_ConfigNQ>
 8003804:	4603      	mov	r3, r0
 8003806:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003808:	7ffb      	ldrb	r3, [r7, #31]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800380e:	7ffb      	ldrb	r3, [r7, #31]
 8003810:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003830:	d003      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fe2a 	bl	8003498 <LL_RCC_SetRNGClockSource>
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	2000      	movs	r0, #0
 8003852:	f7ff fe21 	bl	8003498 <LL_RCC_SetRNGClockSource>
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fe34 	bl	80034c4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003864:	d107      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003874:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	2b00      	cmp	r3, #0
 8003880:	d022      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fe3d 	bl	8003506 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003894:	d107      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f8e3 	bl	8003a80 <RCCEx_PLLSAI1_ConfigNR>
 80038ba:	4603      	mov	r3, r0
 80038bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7ffb      	ldrb	r3, [r7, #31]
 80038c6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fd26 	bl	800332a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fd45 	bl	800337e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fd2c 	bl	8003356 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80038fe:	7fbb      	ldrb	r3, [r7, #30]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800390c:	f7ff fcfe 	bl	800330c <LL_RCC_MSI_EnablePLLMode>
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}

08003914 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003920:	f7ff fe5b 	bl	80035da <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003924:	f7fd fcba 	bl	800129c <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800392c:	f7fd fcb6 	bl	800129c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
      break;
 800393e:	e004      	b.n	800394a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003940:	f7ff fe5a 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d137      	bne.n	80039c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800397e:	f7ff fe1d 	bl	80035bc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003982:	f7fd fc8b 	bl	800129c <HAL_GetTick>
 8003986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003988:	e009      	b.n	800399e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398a:	f7fd fc87 	bl	800129c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d902      	bls.n	800399e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	73fb      	strb	r3, [r7, #15]
        break;
 800399c:	e004      	b.n	80039a8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800399e:	f7ff fe2b 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d1f0      	bne.n	800398a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039d6:	f7ff fe00 	bl	80035da <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039da:	f7fd fc5f 	bl	800129c <HAL_GetTick>
 80039de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039e0:	e009      	b.n	80039f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e2:	f7fd fc5b 	bl	800129c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d902      	bls.n	80039f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039f6:	f7ff fdff 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d137      	bne.n	8003a76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a30:	4313      	orrs	r3, r2
 8003a32:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a34:	f7ff fdc2 	bl	80035bc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd fc30 	bl	800129c <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a3e:	e009      	b.n	8003a54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a40:	f7fd fc2c 	bl	800129c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	73fb      	strb	r3, [r7, #15]
        break;
 8003a52:	e004      	b.n	8003a5e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a54:	f7ff fdd0 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d1f0      	bne.n	8003a40 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a8c:	f7ff fda5 	bl	80035da <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a90:	f7fd fc04 	bl	800129c <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a98:	f7fd fc00 	bl	800129c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aaa:	e004      	b.n	8003ab6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003aac:	f7ff fda4 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d137      	bne.n	8003b2c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003aea:	f7ff fd67 	bl	80035bc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aee:	f7fd fbd5 	bl	800129c <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003af4:	e009      	b.n	8003b0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af6:	f7fd fbd1 	bl	800129c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d902      	bls.n	8003b0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	73fb      	strb	r3, [r7, #15]
        break;
 8003b08:	e004      	b.n	8003b14 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b0a:	f7ff fd75 	bl	80035f8 <LL_RCC_PLLSAI1_IsReady>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d1f0      	bne.n	8003af6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e09f      	b.n	8003c8a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f8a6 	bl	8000cb0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b6c:	4b49      	ldr	r3, [pc, #292]	@ (8003c94 <HAL_RTC_Init+0x15c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d07e      	beq.n	8003c76 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	22ca      	movs	r2, #202	@ 0xca
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2253      	movs	r2, #83	@ 0x53
 8003b86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa18 	bl	8003fbe <RTC_EnterInitMode>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	22ff      	movs	r2, #255	@ 0xff
 8003b9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e067      	b.n	8003c7a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68d2      	ldr	r2, [r2, #12]
 8003be4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6919      	ldr	r1, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c08:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0203 	bic.w	r2, r2, #3
 8003c18:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d113      	bne.n	8003c68 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f996 	bl	8003f72 <HAL_RTC_WaitForSynchro>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	22ff      	movs	r2, #255	@ 0xff
 8003c52:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e010      	b.n	8003c8a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	22ff      	movs	r2, #255	@ 0xff
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e001      	b.n	8003c7a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40002800 	.word	0x40002800

08003c98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RTC_SetTime+0x1a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0b2      	b.n	8003e18 <HAL_RTC_SetTime+0x180>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d126      	bne.n	8003d16 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f996 	bl	8004012 <RTC_ByteToBcd2>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f98f 	bl	8004012 <RTC_ByteToBcd2>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cf8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f987 	bl	8004012 <RTC_ByteToBcd2>
 8003d04:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003d06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	78db      	ldrb	r3, [r3, #3]
 8003d0e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e018      	b.n	8003d48 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	22ca      	movs	r2, #202	@ 0xca
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2253      	movs	r2, #83	@ 0x53
 8003d56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f930 	bl	8003fbe <RTC_EnterInitMode>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	22ff      	movs	r2, #255	@ 0xff
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04b      	b.n	8003e18 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d8e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d9e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dc6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d113      	bne.n	8003dfe <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f8cb 	bl	8003f72 <HAL_RTC_WaitForSynchro>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	22ff      	movs	r2, #255	@ 0xff
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2204      	movs	r2, #4
 8003dee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00c      	b.n	8003e18 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	22ff      	movs	r2, #255	@ 0xff
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003e4e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003e52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11a      	bne.n	8003ece <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f8d8 	bl	8004052 <RTC_Bcd2ToByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f8cf 	bl	8004052 <RTC_Bcd2ToByte>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f8c6 	bl	8004052 <RTC_Bcd2ToByte>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003eee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11a      	bne.n	8003f68 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f88b 	bl	8004052 <RTC_Bcd2ToByte>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f882 	bl	8004052 <RTC_Bcd2ToByte>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	789b      	ldrb	r3, [r3, #2]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f879 	bl	8004052 <RTC_Bcd2ToByte>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f88:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f8a:	f7fd f987 	bl	800129c <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f90:	e009      	b.n	8003fa6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f92:	f7fd f983 	bl	800129c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e007      	b.n	8003fb6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d119      	bne.n	8004008 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fde:	f7fd f95d 	bl	800129c <HAL_GetTick>
 8003fe2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fe4:	e009      	b.n	8003ffa <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003fe6:	f7fd f959 	bl	800129c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ff4:	d901      	bls.n	8003ffa <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e007      	b.n	800400a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8004024:	e005      	b.n	8004032 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800402c:	7afb      	ldrb	r3, [r7, #11]
 800402e:	3b0a      	subs	r3, #10
 8004030:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8004032:	7afb      	ldrb	r3, [r7, #11]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d8f6      	bhi.n	8004026 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	b2da      	uxtb	r2, r3
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	4313      	orrs	r3, r2
 8004044:	b2db      	uxtb	r3, r3
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4413      	add	r3, r2
 800407c:	b2db      	uxtb	r3, r3
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e095      	b.n	80041c8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ac:	d009      	beq.n	80040c2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	61da      	str	r2, [r3, #28]
 80040b4:	e005      	b.n	80040c2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc fe85 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004102:	d902      	bls.n	800410a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e002      	b.n	8004110 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800410a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800410e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004118:	d007      	beq.n	800412a <HAL_SPI_Init+0xa0>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004122:	d002      	beq.n	800412a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	ea42 0103 	orr.w	r1, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0204 	and.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041a6:	ea42 0103 	orr.w	r1, r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_Transmit+0x22>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e15f      	b.n	80044b2 <HAL_SPI_Transmit+0x2e2>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041fa:	f7fd f84f 	bl	800129c <HAL_GetTick>
 80041fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d002      	beq.n	8004216 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004214:	e148      	b.n	80044a8 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_SPI_Transmit+0x52>
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004226:	e13f      	b.n	80044a8 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004272:	d10f      	bne.n	8004294 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004292:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d007      	beq.n	80042b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042ba:	d94f      	bls.n	800435c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_Transmit+0xfa>
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d142      	bne.n	8004350 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	881a      	ldrh	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	1c9a      	adds	r2, r3, #2
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042ee:	e02f      	b.n	8004350 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d112      	bne.n	8004324 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004302:	881a      	ldrh	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004322:	e015      	b.n	8004350 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004324:	f7fc ffba 	bl	800129c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d803      	bhi.n	800433c <HAL_SPI_Transmit+0x16c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Transmit+0x172>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800434e:	e0ab      	b.n	80044a8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ca      	bne.n	80042f0 <HAL_SPI_Transmit+0x120>
 800435a:	e080      	b.n	800445e <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_Transmit+0x19a>
 8004364:	8afb      	ldrh	r3, [r7, #22]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d174      	bne.n	8004454 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d912      	bls.n	800439a <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b02      	subs	r3, #2
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004398:	e05c      	b.n	8004454 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043c0:	e048      	b.n	8004454 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d12b      	bne.n	8004428 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d912      	bls.n	8004400 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	881a      	ldrh	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b02      	subs	r3, #2
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043fe:	e029      	b.n	8004454 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004426:	e015      	b.n	8004454 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004428:	f7fc ff38 	bl	800129c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d803      	bhi.n	8004440 <HAL_SPI_Transmit+0x270>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x276>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004452:	e029      	b.n	80044a8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1b1      	bne.n	80043c2 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fa5c 	bl	8004920 <SPI_EndRxTxTransaction>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e003      	b.n	80044a8 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10e      	bne.n	80044fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
    return;
 80044fa:	e0ce      	b.n	800469a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_SPI_IRQHandler+0x5e>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
    return;
 8004518:	e0bf      	b.n	800469a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_SPI_IRQHandler+0x7e>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80b0 	beq.w	800469a <HAL_SPI_IRQHandler+0x1de>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80aa 	beq.w	800469a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d023      	beq.n	8004598 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b03      	cmp	r3, #3
 800455a:	d011      	beq.n	8004580 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	e00b      	b.n	8004598 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
        return;
 8004596:	e080      	b.n	800469a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d014      	beq.n	80045cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d04f      	beq.n	8004698 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004606:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_SPI_IRQHandler+0x168>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d034      	beq.n	800468e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0203 	bic.w	r2, r2, #3
 8004632:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004638:	2b00      	cmp	r3, #0
 800463a:	d011      	beq.n	8004660 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <HAL_SPI_IRQHandler+0x1e4>)
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc ff72 	bl	8001532 <HAL_DMA_Abort_IT>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004658:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	4a0c      	ldr	r2, [pc, #48]	@ (80046a0 <HAL_SPI_IRQHandler+0x1e4>)
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc ff5c 	bl	8001532 <HAL_DMA_Abort_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004684:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800468c:	e003      	b.n	8004696 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f808 	bl	80046a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004694:	e000      	b.n	8004698 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004696:	bf00      	nop
    return;
 8004698:	bf00      	nop
  }
}
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	080046b9 	.word	0x080046b9

080046a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff ffe5 	bl	80046a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046f4:	f7fc fdd2 	bl	800129c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	4413      	add	r3, r2
 8004702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004704:	f7fc fdca 	bl	800129c <HAL_GetTick>
 8004708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800470a:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	015b      	lsls	r3, r3, #5
 8004710:	0d1b      	lsrs	r3, r3, #20
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471a:	e054      	b.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d050      	beq.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004724:	f7fc fdba 	bl	800129c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	429a      	cmp	r2, r3
 8004732:	d902      	bls.n	800473a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13d      	bne.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004752:	d111      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800475c:	d004      	beq.n	8004768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d107      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004780:	d10f      	bne.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e017      	b.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d19b      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000008 	.word	0x20000008

080047f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	@ 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004806:	f7fc fd49 	bl	800129c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	4413      	add	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004816:	f7fc fd41 	bl	800129c <HAL_GetTick>
 800481a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004824:	4b3d      	ldr	r3, [pc, #244]	@ (800491c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	00da      	lsls	r2, r3, #3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	0d1b      	lsrs	r3, r3, #20
 8004834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800483c:	e060      	b.n	8004900 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004844:	d107      	bne.n	8004856 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004854:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d050      	beq.n	8004900 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800485e:	f7fc fd1d 	bl	800129c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486a:	429a      	cmp	r2, r3
 800486c:	d902      	bls.n	8004874 <SPI_WaitFifoStateUntilTimeout+0x80>
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d13d      	bne.n	80048f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004882:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800488c:	d111      	bne.n	80048b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d004      	beq.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a0:	d107      	bne.n	80048b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ba:	d10f      	bne.n	80048dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e010      	b.n	8004912 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d196      	bne.n	800483e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3728      	adds	r7, #40	@ 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000008 	.word	0x20000008

08004920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ff5b 	bl	80047f4 <SPI_WaitFifoStateUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e027      	b.n	80049a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff fec0 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e014      	b.n	80049a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ff34 	bl	80047f4 <SPI_WaitFifoStateUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	f043 0220 	orr.w	r2, r3, #32
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e000      	b.n	80049a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80049b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af02      	add	r7, sp, #8
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	4608      	mov	r0, r1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	817b      	strh	r3, [r7, #10]
 8004a30:	460b      	mov	r3, r1
 8004a32:	813b      	strh	r3, [r7, #8]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004a38:	897a      	ldrh	r2, [r7, #10]
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b298      	uxth	r0, r3
 8004a40:	893a      	ldrh	r2, [r7, #8]
 8004a42:	8b3b      	ldrh	r3, [r7, #24]
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	893a      	ldrh	r2, [r7, #8]
 8004a4a:	8979      	ldrh	r1, [r7, #10]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 ffb9 	bl	80059c8 <u8g2_IsIntersection>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d012      	beq.n	8004a82 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8004a5c:	e00d      	b.n	8004a7a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	8979      	ldrh	r1, [r7, #10]
 8004a64:	2000      	movs	r0, #0
 8004a66:	9000      	str	r0, [sp, #0]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fed8 	bl	800581e <u8g2_DrawHVLine>
    y++;    
 8004a6e:	893b      	ldrh	r3, [r7, #8]
 8004a70:	3301      	adds	r3, #1
 8004a72:	813b      	strh	r3, [r7, #8]
    h--;
 8004a74:	8b3b      	ldrh	r3, [r7, #24]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8004a7a:	8b3b      	ldrh	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ee      	bne.n	8004a5e <u8g2_DrawBox+0x40>
 8004a80:	e000      	b.n	8004a84 <u8g2_DrawBox+0x66>
    return;
 8004a82:	bf00      	nop
  }
}
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	7c1b      	ldrb	r3, [r3, #16]
 8004a98:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	fb02 f303 	mul.w	r3, r2, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fccb 	bl	8006454 <memset>
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af02      	add	r7, sp, #8
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	7c1b      	ldrb	r3, [r3, #16]
 8004adc:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	89ba      	ldrh	r2, [r7, #12]
 8004aee:	fb12 f303 	smulbb	r3, r2, r3
 8004af2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004af4:	89bb      	ldrh	r3, [r7, #12]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004afa:	89bb      	ldrh	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	4413      	add	r3, r2
 8004b00:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004b02:	7bf9      	ldrb	r1, [r7, #15]
 8004b04:	78ba      	ldrb	r2, [r7, #2]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 fbb1 	bl	8006276 <u8x8_DrawTile>
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b2e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004b36:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	7c5b      	ldrb	r3, [r3, #17]
 8004b3e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004b40:	7bba      	ldrb	r2, [r7, #14]
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ffbd 	bl	8004ac6 <u8g2_send_tile_row>
    src_row++;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	3301      	adds	r3, #1
 8004b56:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	7b7b      	ldrb	r3, [r7, #13]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d203      	bcs.n	8004b68 <u8g2_send_buffer+0x4c>
 8004b60:	7bba      	ldrb	r2, [r7, #14]
 8004b62:	7b3b      	ldrb	r3, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3eb      	bcc.n	8004b40 <u8g2_send_buffer+0x24>
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ffcf 	bl	8004b1c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f001 fbca 	bl	8006318 <u8x8_RefreshDisplay>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <u8g2_m_16_16_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_16_f(uint8_t *page_cnt)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 16;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 16;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2210      	movs	r2, #16
 8004b98:	701a      	strb	r2, [r3, #0]
  return buf;
 8004b9a:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <u8g2_m_16_16_f+0x1c>)
  #endif
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000560 	.word	0x20000560

08004bac <u8g2_Setup_ls013b7dh03_128x128_f>:
  buf = u8g2_m_16_16_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* ls013b7dh03 f */
void u8g2_Setup_ls013b7dh03_128x128_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ls013b7dh03_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf0 <u8g2_Setup_ls013b7dh03_128x128_f+0x44>)
 8004bc2:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <u8g2_Setup_ls013b7dh03_128x128_f+0x48>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f001 fc07 	bl	80063d8 <u8x8_Setup>
  buf = u8g2_m_16_16_f(&tile_buf_height);
 8004bca:	f107 0313 	add.w	r3, r7, #19
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ffdc 	bl	8004b8c <u8g2_m_16_16_f>
 8004bd4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8004bd6:	7cfa      	ldrb	r2, [r7, #19]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <u8g2_Setup_ls013b7dh03_128x128_f+0x4c>)
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 ffc4 	bl	8005b6e <u8g2_SetupBuffer>
}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	08005fb9 	.word	0x08005fb9
 8004bf4:	08006041 	.word	0x08006041
 8004bf8:	08005a1f 	.word	0x08005a1f

08004bfc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	781b      	ldrb	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	81fb      	strh	r3, [r7, #14]
    font++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004c40:	89fb      	ldrh	r3, [r7, #14]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	89fb      	ldrh	r3, [r7, #14]
 8004c4e:	4413      	add	r3, r2
 8004c50:	81fb      	strh	r3, [r7, #14]
    return pos;
 8004c52:	89fb      	ldrh	r3, [r7, #14]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	6838      	ldr	r0, [r7, #0]
 8004c6e:	f7ff ffc5 	bl	8004bfc <u8g2_font_get_byte>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	f7ff ffbd 	bl	8004bfc <u8g2_font_get_byte>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f7ff ffb5 	bl	8004bfc <u8g2_font_get_byte>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	6838      	ldr	r0, [r7, #0]
 8004c9e:	f7ff ffad 	bl	8004bfc <u8g2_font_get_byte>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004caa:	2104      	movs	r1, #4
 8004cac:	6838      	ldr	r0, [r7, #0]
 8004cae:	f7ff ffa5 	bl	8004bfc <u8g2_font_get_byte>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004cba:	2105      	movs	r1, #5
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f7ff ff9d 	bl	8004bfc <u8g2_font_get_byte>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004cca:	2106      	movs	r1, #6
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f7ff ff95 	bl	8004bfc <u8g2_font_get_byte>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004cda:	2107      	movs	r1, #7
 8004cdc:	6838      	ldr	r0, [r7, #0]
 8004cde:	f7ff ff8d 	bl	8004bfc <u8g2_font_get_byte>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004cea:	2108      	movs	r1, #8
 8004cec:	6838      	ldr	r0, [r7, #0]
 8004cee:	f7ff ff85 	bl	8004bfc <u8g2_font_get_byte>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8004cfa:	2109      	movs	r1, #9
 8004cfc:	6838      	ldr	r0, [r7, #0]
 8004cfe:	f7ff ff7d 	bl	8004bfc <u8g2_font_get_byte>
 8004d02:	4603      	mov	r3, r0
 8004d04:	b25a      	sxtb	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004d0a:	210a      	movs	r1, #10
 8004d0c:	6838      	ldr	r0, [r7, #0]
 8004d0e:	f7ff ff75 	bl	8004bfc <u8g2_font_get_byte>
 8004d12:	4603      	mov	r3, r0
 8004d14:	b25a      	sxtb	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004d1a:	210b      	movs	r1, #11
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f7ff ff6d 	bl	8004bfc <u8g2_font_get_byte>
 8004d22:	4603      	mov	r3, r0
 8004d24:	b25a      	sxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004d2a:	210c      	movs	r1, #12
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7ff ff65 	bl	8004bfc <u8g2_font_get_byte>
 8004d32:	4603      	mov	r3, r0
 8004d34:	b25a      	sxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004d3a:	210d      	movs	r1, #13
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f7ff ff5d 	bl	8004bfc <u8g2_font_get_byte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	b25a      	sxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004d4a:	210e      	movs	r1, #14
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f7ff ff55 	bl	8004bfc <u8g2_font_get_byte>
 8004d52:	4603      	mov	r3, r0
 8004d54:	b25a      	sxtb	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004d5a:	210f      	movs	r1, #15
 8004d5c:	6838      	ldr	r0, [r7, #0]
 8004d5e:	f7ff ff4d 	bl	8004bfc <u8g2_font_get_byte>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b25a      	sxtb	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004d6a:	2110      	movs	r1, #16
 8004d6c:	6838      	ldr	r0, [r7, #0]
 8004d6e:	f7ff ff45 	bl	8004bfc <u8g2_font_get_byte>
 8004d72:	4603      	mov	r3, r0
 8004d74:	b25a      	sxtb	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004d7a:	2111      	movs	r1, #17
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7ff ff4f 	bl	8004c20 <u8g2_font_get_word>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004d8a:	2113      	movs	r1, #19
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f7ff ff47 	bl	8004c20 <u8g2_font_get_word>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004d9a:	2115      	movs	r1, #21
 8004d9c:	6838      	ldr	r0, [r7, #0]
 8004d9e:	f7ff ff3f 	bl	8004c20 <u8g2_font_get_word>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	82da      	strh	r2, [r3, #22]
#endif
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7b1b      	ldrb	r3, [r3, #12]
 8004dc2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004dcc:	7bfa      	ldrb	r2, [r7, #15]
 8004dce:	7b7b      	ldrb	r3, [r7, #13]
 8004dd0:	fa42 f303 	asr.w	r3, r2, r3
 8004dd4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004dd6:	7b7b      	ldrb	r3, [r7, #13]
 8004dd8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004dda:	7bba      	ldrb	r2, [r7, #14]
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	4413      	add	r3, r2
 8004de0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004de2:	7bbb      	ldrb	r3, [r7, #14]
 8004de4:	2b07      	cmp	r3, #7
 8004de6:	d91a      	bls.n	8004e1e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004de8:	2308      	movs	r3, #8
 8004dea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004dec:	7b3a      	ldrb	r2, [r7, #12]
 8004dee:	7b7b      	ldrb	r3, [r7, #13]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	7b3b      	ldrb	r3, [r7, #12]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	b25a      	sxtb	r2, r3
 8004e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	3b08      	subs	r3, #8
 8004e1c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	4013      	ands	r3, r2
 8004e32:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7bba      	ldrb	r2, [r7, #14]
 8004e38:	731a      	strb	r2, [r3, #12]
  return val;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ffaa 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004e6c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	73fb      	strb	r3, [r7, #15]
  return v;
 8004e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004e8e:	b490      	push	{r4, r7}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	80fb      	strh	r3, [r7, #6]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	717b      	strb	r3, [r7, #5]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	713b      	strb	r3, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d014      	beq.n	8004edc <u8g2_add_vector_y+0x4e>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	dc19      	bgt.n	8004eea <u8g2_add_vector_y+0x5c>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <u8g2_add_vector_y+0x32>
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d007      	beq.n	8004ece <u8g2_add_vector_y+0x40>
 8004ebe:	e014      	b.n	8004eea <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8004ec0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	4413      	add	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
      break;
 8004ecc:	e014      	b.n	8004ef8 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8004ece:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
      break;
 8004eda:	e00d      	b.n	8004ef8 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8004edc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	80fb      	strh	r3, [r7, #6]
      break;
 8004ee8:	e006      	b.n	8004ef8 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004eea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	80fb      	strh	r3, [r7, #6]
      break;      
 8004ef6:	bf00      	nop
  }
  return dy;
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc90      	pop	{r4, r7}
 8004f02:	4770      	bx	lr

08004f04 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004f04:	b490      	push	{r4, r7}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	461a      	mov	r2, r3
 8004f12:	4623      	mov	r3, r4
 8004f14:	80fb      	strh	r3, [r7, #6]
 8004f16:	4603      	mov	r3, r0
 8004f18:	717b      	strb	r3, [r7, #5]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	713b      	strb	r3, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d014      	beq.n	8004f52 <u8g2_add_vector_x+0x4e>
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	dc19      	bgt.n	8004f60 <u8g2_add_vector_x+0x5c>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <u8g2_add_vector_x+0x32>
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d007      	beq.n	8004f44 <u8g2_add_vector_x+0x40>
 8004f34:	e014      	b.n	8004f60 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8004f36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	4413      	add	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
      break;
 8004f42:	e014      	b.n	8004f6e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8004f44:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	80fb      	strh	r3, [r7, #6]
      break;
 8004f50:	e00d      	b.n	8004f6e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8004f52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	80fb      	strh	r3, [r7, #6]
      break;
 8004f5e:	e006      	b.n	8004f6e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8004f60:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	4413      	add	r3, r2
 8004f6a:	80fb      	strh	r3, [r7, #6]
      break;      
 8004f6c:	bf00      	nop
  }
  return dx;
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc90      	pop	{r4, r7}
 8004f78:	4770      	bx	lr

08004f7a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b088      	sub	sp, #32
 8004f7e:	af02      	add	r7, sp, #8
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	70fb      	strb	r3, [r7, #3]
 8004f86:	4613      	mov	r3, r2
 8004f88:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3360      	adds	r3, #96	@ 0x60
 8004f8e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004f9a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004fa2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004faa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	7d7b      	ldrb	r3, [r7, #21]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004fb8:	7dfa      	ldrb	r2, [r7, #23]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d201      	bcs.n	8004fc4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	889b      	ldrh	r3, [r3, #4]
 8004fc8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004fd0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004fd4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	7c1b      	ldrb	r3, [r3, #16]
 8004fdc:	89b8      	ldrh	r0, [r7, #12]
 8004fde:	f7ff ff91 	bl	8004f04 <u8g2_add_vector_x>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004fe6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004fea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	7c1b      	ldrb	r3, [r3, #16]
 8004ff2:	8978      	ldrh	r0, [r7, #10]
 8004ff4:	f7ff ff4b 	bl	8004e8e <u8g2_add_vector_y>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004ffc:	78bb      	ldrb	r3, [r7, #2]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	7b9a      	ldrb	r2, [r3, #14]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800500c:	7dbb      	ldrb	r3, [r7, #22]
 800500e:	b298      	uxth	r0, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	7c1b      	ldrb	r3, [r3, #16]
 8005014:	897a      	ldrh	r2, [r7, #10]
 8005016:	89b9      	ldrh	r1, [r7, #12]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	4603      	mov	r3, r0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fbfe 	bl	800581e <u8g2_DrawHVLine>
 8005022:	e013      	b.n	800504c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	7b5b      	ldrb	r3, [r3, #13]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	7bda      	ldrb	r2, [r3, #15]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8005036:	7dbb      	ldrb	r3, [r7, #22]
 8005038:	b298      	uxth	r0, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	7c1b      	ldrb	r3, [r3, #16]
 800503e:	897a      	ldrh	r2, [r7, #10]
 8005040:	89b9      	ldrh	r1, [r7, #12]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	4603      	mov	r3, r0
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fbe9 	bl	800581e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800504c:	7dfa      	ldrb	r2, [r7, #23]
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	429a      	cmp	r2, r3
 8005052:	d309      	bcc.n	8005068 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8005054:	7dfa      	ldrb	r2, [r7, #23]
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	757b      	strb	r3, [r7, #21]
    ly++;
 8005060:	7d3b      	ldrb	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8005066:	e79d      	b.n	8004fa4 <u8g2_font_decode_len+0x2a>
      break;
 8005068:	bf00      	nop
  }
  lx += cnt;
 800506a:	7d7a      	ldrb	r2, [r7, #21]
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	4413      	add	r3, r2
 8005070:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005072:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800507a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	725a      	strb	r2, [r3, #9]
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3360      	adds	r3, #96	@ 0x60
 8005098:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fe7f 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 80050b4:	4603      	mov	r3, r0
 80050b6:	b25a      	sxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fe74 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 80050ca:	4603      	mov	r3, r0
 80050cc:	b25a      	sxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	7b9b      	ldrb	r3, [r3, #14]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	73da      	strb	r2, [r3, #15]
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	@ 0x28
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3360      	adds	r3, #96	@ 0x60
 8005106:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff ffbd 	bl	800508a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8005116:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800511e:	4619      	mov	r1, r3
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7ff fe91 	bl	8004e48 <u8g2_font_decode_get_signed_bits>
 8005126:	4603      	mov	r3, r0
 8005128:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8005130:	4619      	mov	r1, r3
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff fe88 	bl	8004e48 <u8g2_font_decode_get_signed_bits>
 8005138:	4603      	mov	r3, r0
 800513a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005142:	4619      	mov	r1, r3
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f7ff fe7f 	bl	8004e48 <u8g2_font_decode_get_signed_bits>
 800514a:	4603      	mov	r3, r0
 800514c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f340 80d7 	ble.w	8005308 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	8898      	ldrh	r0, [r3, #4]
 800515e:	7cfa      	ldrb	r2, [r7, #19]
 8005160:	7c7b      	ldrb	r3, [r7, #17]
 8005162:	4413      	add	r3, r2
 8005164:	b2db      	uxtb	r3, r3
 8005166:	425b      	negs	r3, r3
 8005168:	b2db      	uxtb	r3, r3
 800516a:	b25a      	sxtb	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	7c1b      	ldrb	r3, [r3, #16]
 8005170:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8005174:	f7ff fec6 	bl	8004f04 <u8g2_add_vector_x>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	88d8      	ldrh	r0, [r3, #6]
 8005184:	7cfa      	ldrb	r2, [r7, #19]
 8005186:	7c7b      	ldrb	r3, [r7, #17]
 8005188:	4413      	add	r3, r2
 800518a:	b2db      	uxtb	r3, r3
 800518c:	425b      	negs	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	b25a      	sxtb	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	7c1b      	ldrb	r3, [r3, #16]
 8005196:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800519a:	f7ff fe78 	bl	8004e8e <u8g2_add_vector_y>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	889b      	ldrh	r3, [r3, #4]
 80051aa:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	88db      	ldrh	r3, [r3, #6]
 80051b0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80051b2:	8bfb      	ldrh	r3, [r7, #30]
 80051b4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80051b6:	8b7b      	ldrh	r3, [r7, #26]
 80051b8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	7c1b      	ldrb	r3, [r3, #16]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d85a      	bhi.n	8005278 <u8g2_font_decode_glyph+0x180>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <u8g2_font_decode_glyph+0xd0>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	08005251 	.word	0x08005251
      {
	case 0:
	    x1 += decode->glyph_width;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	8bbb      	ldrh	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80051e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	8b3b      	ldrh	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	833b      	strh	r3, [r7, #24]
	    break;
 80051f2:	e041      	b.n	8005278 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80051f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8bfa      	ldrh	r2, [r7, #30]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	3301      	adds	r3, #1
 8005204:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8005206:	8bbb      	ldrh	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005212:	b29a      	uxth	r2, r3
 8005214:	8b3b      	ldrh	r3, [r7, #24]
 8005216:	4413      	add	r3, r2
 8005218:	833b      	strh	r3, [r7, #24]
	    break;
 800521a:	e02d      	b.n	8005278 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005222:	b29b      	uxth	r3, r3
 8005224:	8bfa      	ldrh	r2, [r7, #30]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800522a:	8bfb      	ldrh	r3, [r7, #30]
 800522c:	3301      	adds	r3, #1
 800522e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8005230:	8bbb      	ldrh	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8005236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800523a:	b29b      	uxth	r3, r3
 800523c:	8b7a      	ldrh	r2, [r7, #26]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005242:	8b7b      	ldrh	r3, [r7, #26]
 8005244:	3301      	adds	r3, #1
 8005246:	837b      	strh	r3, [r7, #26]
	    y1++;
 8005248:	8b3b      	ldrh	r3, [r7, #24]
 800524a:	3301      	adds	r3, #1
 800524c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800524e:	e013      	b.n	8005278 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8005250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005254:	b29a      	uxth	r2, r3
 8005256:	8bbb      	ldrh	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005262:	b29b      	uxth	r3, r3
 8005264:	8b7a      	ldrh	r2, [r7, #26]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800526a:	8b7b      	ldrh	r3, [r7, #26]
 800526c:	3301      	adds	r3, #1
 800526e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8005270:	8b3b      	ldrh	r3, [r7, #24]
 8005272:	3301      	adds	r3, #1
 8005274:	833b      	strh	r3, [r7, #24]
	    break;	  
 8005276:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8005278:	8bb8      	ldrh	r0, [r7, #28]
 800527a:	8b7a      	ldrh	r2, [r7, #26]
 800527c:	8bf9      	ldrh	r1, [r7, #30]
 800527e:	8b3b      	ldrh	r3, [r7, #24]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	4603      	mov	r3, r0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb9f 	bl	80059c8 <u8g2_IsIntersection>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <u8g2_font_decode_glyph+0x19e>
	return d;
 8005290:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8005294:	e03a      	b.n	800530c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80052a8:	4619      	mov	r1, r3
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff fd81 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80052ba:	4619      	mov	r1, r3
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f7ff fd78 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2200      	movs	r2, #0
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fe54 	bl	8004f7a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80052d2:	7bbb      	ldrb	r3, [r7, #14]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff fe4e 	bl	8004f7a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80052de:	2101      	movs	r1, #1
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7ff fd66 	bl	8004db2 <u8g2_font_decode_get_unsigned_bits>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ec      	bne.n	80052c6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80052f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	dd00      	ble.n	80052fc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80052fa:	e7d2      	b.n	80052a2 <u8g2_font_decode_glyph+0x1aa>
	break;
 80052fc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	7b9a      	ldrb	r2, [r3, #14]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8005308:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005324:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3317      	adds	r3, #23
 800532a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	2bff      	cmp	r3, #255	@ 0xff
 8005330:	d82a      	bhi.n	8005388 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d907      	bls.n	8005348 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800533e:	461a      	mov	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e009      	b.n	800535c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8005348:	887b      	ldrh	r3, [r7, #2]
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d906      	bls.n	800535c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005354:	461a      	mov	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3301      	adds	r3, #1
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04e      	beq.n	8005404 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	4293      	cmp	r3, r2
 8005370:	d102      	bne.n	8005378 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	3302      	adds	r3, #2
 8005376:	e049      	b.n	800540c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3301      	adds	r3, #1
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005386:	e7e9      	b.n	800535c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800538e:	461a      	mov	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800539a:	2100      	movs	r1, #0
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7ff fc3f 	bl	8004c20 <u8g2_font_get_word>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80053ac:	2102      	movs	r1, #2
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f7ff fc36 	bl	8004c20 <u8g2_font_get_word>
 80053b4:	4603      	mov	r3, r0
 80053b6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3304      	adds	r3, #4
 80053bc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80053be:	89fa      	ldrh	r2, [r7, #14]
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d3e9      	bcc.n	800539a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	3301      	adds	r3, #1
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	4313      	orrs	r3, r2
 80053de:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80053e6:	89fa      	ldrh	r2, [r7, #14]
 80053e8:	887b      	ldrh	r3, [r7, #2]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d102      	bne.n	80053f4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3303      	adds	r3, #3
 80053f2:	e00b      	b.n	800540c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3302      	adds	r3, #2
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8005402:	e7e0      	b.n	80053c6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <u8g2_font_get_glyph_data+0xf6>
	break;
 8005408:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	897a      	ldrh	r2, [r7, #10]
 8005436:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	893a      	ldrh	r2, [r7, #8]
 800543e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	4619      	mov	r1, r3
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff ff64 	bl	8005314 <u8g2_font_get_glyph_data>
 800544c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8005454:	6939      	ldr	r1, [r7, #16]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fe4e 	bl	80050f8 <u8g2_font_decode_glyph>
 800545c:	4603      	mov	r3, r0
 800545e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8005460:	8afb      	ldrh	r3, [r7, #22]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	4603      	mov	r3, r0
 800547c:	817b      	strh	r3, [r7, #10]
 800547e:	460b      	mov	r3, r1
 8005480:	813b      	strh	r3, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800548c:	2b03      	cmp	r3, #3
 800548e:	d833      	bhi.n	80054f8 <u8g2_DrawGlyph+0x8c>
 8005490:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <u8g2_DrawGlyph+0x2c>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054e5 	.word	0x080054e5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	4798      	blx	r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	4413      	add	r3, r2
 80054b8:	813b      	strh	r3, [r7, #8]
      break;
 80054ba:	e01d      	b.n	80054f8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	4798      	blx	r3
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	817b      	strh	r3, [r7, #10]
      break;
 80054ce:	e013      	b.n	80054f8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	4798      	blx	r3
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	813b      	strh	r3, [r7, #8]
      break;
 80054e2:	e009      	b.n	80054f8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	897b      	ldrh	r3, [r7, #10]
 80054f2:	4413      	add	r3, r2
 80054f4:	817b      	strh	r3, [r7, #10]
      break;
 80054f6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	893a      	ldrh	r2, [r7, #8]
 80054fc:	8979      	ldrh	r1, [r7, #10]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ff88 	bl	8005414 <u8g2_font_draw_glyph>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop

08005510 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	817b      	strh	r3, [r7, #10]
 800551e:	4613      	mov	r3, r2
 8005520:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fca7 	bl	8005e76 <u8x8_utf8_init>
  sum = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	4611      	mov	r1, r2
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	4798      	blx	r3
 800553a:	4603      	mov	r3, r0
 800553c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800553e:	8abb      	ldrh	r3, [r7, #20]
 8005540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005544:	4293      	cmp	r3, r2
 8005546:	d038      	beq.n	80055ba <u8g2_draw_string+0xaa>
      break;
    str++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3301      	adds	r3, #1
 800554c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800554e:	8abb      	ldrh	r3, [r7, #20]
 8005550:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005554:	4293      	cmp	r3, r2
 8005556:	d0e9      	beq.n	800552c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8005558:	8abb      	ldrh	r3, [r7, #20]
 800555a:	893a      	ldrh	r2, [r7, #8]
 800555c:	8979      	ldrh	r1, [r7, #10]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ff84 	bl	800546c <u8g2_DrawGlyph>
 8005564:	4603      	mov	r3, r0
 8005566:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800556e:	2b03      	cmp	r3, #3
 8005570:	d81e      	bhi.n	80055b0 <u8g2_draw_string+0xa0>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <u8g2_draw_string+0x68>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005589 	.word	0x08005589
 800557c:	08005593 	.word	0x08005593
 8005580:	0800559d 	.word	0x0800559d
 8005584:	080055a7 	.word	0x080055a7
      {
	case 0:
	  x += delta;
 8005588:	897a      	ldrh	r2, [r7, #10]
 800558a:	8a7b      	ldrh	r3, [r7, #18]
 800558c:	4413      	add	r3, r2
 800558e:	817b      	strh	r3, [r7, #10]
	  break;
 8005590:	e00e      	b.n	80055b0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8005592:	893a      	ldrh	r2, [r7, #8]
 8005594:	8a7b      	ldrh	r3, [r7, #18]
 8005596:	4413      	add	r3, r2
 8005598:	813b      	strh	r3, [r7, #8]
	  break;
 800559a:	e009      	b.n	80055b0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800559c:	897a      	ldrh	r2, [r7, #10]
 800559e:	8a7b      	ldrh	r3, [r7, #18]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	817b      	strh	r3, [r7, #10]
	  break;
 80055a4:	e004      	b.n	80055b0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80055a6:	893a      	ldrh	r2, [r7, #8]
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	813b      	strh	r3, [r7, #8]
	  break;
 80055ae:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80055b0:	8afa      	ldrh	r2, [r7, #22]
 80055b2:	8a7b      	ldrh	r3, [r7, #18]
 80055b4:	4413      	add	r3, r2
 80055b6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80055b8:	e7b8      	b.n	800552c <u8g2_draw_string+0x1c>
      break;
 80055ba:	bf00      	nop
    }
  }
  return sum;
 80055bc:	8afb      	ldrh	r3, [r7, #22]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop

080055c8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	817b      	strh	r3, [r7, #10]
 80055d6:	4613      	mov	r3, r2
 80055d8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a06      	ldr	r2, [pc, #24]	@ (80055f8 <u8g2_DrawStr+0x30>)
 80055de:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80055e0:	893a      	ldrh	r2, [r7, #8]
 80055e2:	8979      	ldrh	r1, [r7, #10]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff ff92 	bl	8005510 <u8g2_draw_string>
 80055ec:	4603      	mov	r3, r0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	08005e93 	.word	0x08005e93

080055fc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05d      	beq.n	80056c8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04d      	beq.n	80056ca <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8005634:	2b01      	cmp	r3, #1
 8005636:	d11c      	bne.n	8005672 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8005644:	429a      	cmp	r2, r3
 8005646:	da05      	bge.n	8005654 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8005660:	429a      	cmp	r2, r3
 8005662:	dd32      	ble.n	80056ca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8005670:	e02b      	b.n	80056ca <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8005680:	4619      	mov	r1, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8005688:	440b      	add	r3, r1
 800568a:	429a      	cmp	r2, r3
 800568c:	da0d      	bge.n	80056aa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4413      	add	r3, r2
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	b25a      	sxtb	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80056b6:	429a      	cmp	r2, r3
 80056b8:	dd07      	ble.n	80056ca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80056c6:	e000      	b.n	80056ca <u8g2_UpdateRefHeight+0xce>
    return;
 80056c8:	bf00      	nop
  }  
}
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  return 0;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <u8g2_SetFontPosBaseline+0x1c>)
 80056f8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	080056d5 	.word	0x080056d5

0800570c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d00b      	beq.n	8005738 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3374      	adds	r3, #116	@ 0x74
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fa97 	bl	8004c60 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ff62 	bl	80055fc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	460b      	mov	r3, r1
 8005750:	80fb      	strh	r3, [r7, #6]
 8005752:	4613      	mov	r3, r2
 8005754:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800575c:	8afb      	ldrh	r3, [r7, #22]
 800575e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	8abb      	ldrh	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800576a:	8afa      	ldrh	r2, [r7, #22]
 800576c:	8abb      	ldrh	r3, [r7, #20]
 800576e:	429a      	cmp	r2, r3
 8005770:	d90b      	bls.n	800578a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8005772:	8afa      	ldrh	r2, [r7, #22]
 8005774:	88bb      	ldrh	r3, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d205      	bcs.n	8005786 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800577a:	88bb      	ldrh	r3, [r7, #4]
 800577c:	82bb      	strh	r3, [r7, #20]
      b--;
 800577e:	8abb      	ldrh	r3, [r7, #20]
 8005780:	3b01      	subs	r3, #1
 8005782:	82bb      	strh	r3, [r7, #20]
 8005784:	e001      	b.n	800578a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800578a:	8afa      	ldrh	r2, [r7, #22]
 800578c:	88bb      	ldrh	r3, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d301      	bcc.n	8005796 <u8g2_clip_intersection2+0x56>
    return 0;
 8005792:	2300      	movs	r3, #0
 8005794:	e01c      	b.n	80057d0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8005796:	8aba      	ldrh	r2, [r7, #20]
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	429a      	cmp	r2, r3
 800579c:	d801      	bhi.n	80057a2 <u8g2_clip_intersection2+0x62>
    return 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	e016      	b.n	80057d0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80057a2:	8afa      	ldrh	r2, [r7, #22]
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d201      	bcs.n	80057ae <u8g2_clip_intersection2+0x6e>
    a = c;
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80057ae:	8aba      	ldrh	r2, [r7, #20]
 80057b0:	88bb      	ldrh	r3, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d901      	bls.n	80057ba <u8g2_clip_intersection2+0x7a>
    b = d;
 80057b6:	88bb      	ldrh	r3, [r7, #4]
 80057b8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8afa      	ldrh	r2, [r7, #22]
 80057be:	801a      	strh	r2, [r3, #0]
  b -= a;
 80057c0:	8aba      	ldrh	r2, [r7, #20]
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	8aba      	ldrh	r2, [r7, #20]
 80057cc:	801a      	strh	r2, [r3, #0]
  return 1;
 80057ce:	2301      	movs	r3, #1
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b087      	sub	sp, #28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057fa:	893a      	ldrh	r2, [r7, #8]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005804:	88f8      	ldrh	r0, [r7, #6]
 8005806:	893a      	ldrh	r2, [r7, #8]
 8005808:	8979      	ldrh	r1, [r7, #10]
 800580a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	47a0      	blx	r4
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}

0800581e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800581e:	b590      	push	{r4, r7, lr}
 8005820:	b087      	sub	sp, #28
 8005822:	af02      	add	r7, sp, #8
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
 800582c:	4603      	mov	r3, r0
 800582e:	817b      	strh	r3, [r7, #10]
 8005830:	460b      	mov	r3, r1
 8005832:	813b      	strh	r3, [r7, #8]
 8005834:	4613      	mov	r3, r2
 8005836:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d075      	beq.n	800592e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d072      	beq.n	800592e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d91a      	bls.n	8005884 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800584e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d109      	bne.n	800586a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8005856:	897a      	ldrh	r2, [r7, #10]
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	b29b      	uxth	r3, r3
 800585e:	817b      	strh	r3, [r7, #10]
	  x++;
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	3301      	adds	r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	817b      	strh	r3, [r7, #10]
 8005868:	e00c      	b.n	8005884 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800586a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d108      	bne.n	8005884 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8005872:	893a      	ldrh	r2, [r7, #8]
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	b29b      	uxth	r3, r3
 800587a:	813b      	strh	r3, [r7, #8]
	  y++;
 800587c:	893b      	ldrh	r3, [r7, #8]
 800587e:	3301      	adds	r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8005884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11a      	bne.n	80058ce <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800589e:	893b      	ldrh	r3, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d83b      	bhi.n	800591c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80058aa:	893b      	ldrh	r3, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d937      	bls.n	8005920 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80058bc:	1db9      	adds	r1, r7, #6
 80058be:	f107 000a 	add.w	r0, r7, #10
 80058c2:	f7ff ff3d 	bl	8005740 <u8g2_clip_intersection2>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11a      	bne.n	8005902 <u8g2_DrawHVLine+0xe4>
	  return;
 80058cc:	e02f      	b.n	800592e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80058d4:	897b      	ldrh	r3, [r7, #10]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d824      	bhi.n	8005924 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80058e0:	897b      	ldrh	r3, [r7, #10]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d920      	bls.n	8005928 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80058f2:	1db9      	adds	r1, r7, #6
 80058f4:	f107 0008 	add.w	r0, r7, #8
 80058f8:	f7ff ff22 	bl	8005740 <u8g2_clip_intersection2>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d014      	beq.n	800592c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	689c      	ldr	r4, [r3, #8]
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	893a      	ldrh	r2, [r7, #8]
 800590c:	88f8      	ldrh	r0, [r7, #6]
 800590e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4603      	mov	r3, r0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	47a0      	blx	r4
 800591a:	e008      	b.n	800592e <u8g2_DrawHVLine+0x110>
	  return;
 800591c:	bf00      	nop
 800591e:	e006      	b.n	800592e <u8g2_DrawHVLine+0x110>
	  return;
 8005920:	bf00      	nop
 8005922:	e004      	b.n	800592e <u8g2_DrawHVLine+0x110>
	  return;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <u8g2_DrawHVLine+0x110>
	  return;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <u8g2_DrawHVLine+0x110>
	  return;
 800592c:	bf00      	nop
    }
}
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bd90      	pop	{r4, r7, pc}

08005934 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d903      	bls.n	8005956 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005962:	b490      	push	{r4, r7}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	4604      	mov	r4, r0
 800596a:	4608      	mov	r0, r1
 800596c:	4611      	mov	r1, r2
 800596e:	461a      	mov	r2, r3
 8005970:	4623      	mov	r3, r4
 8005972:	80fb      	strh	r3, [r7, #6]
 8005974:	4603      	mov	r3, r0
 8005976:	80bb      	strh	r3, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
 800597c:	4613      	mov	r3, r2
 800597e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8005980:	887a      	ldrh	r2, [r7, #2]
 8005982:	88bb      	ldrh	r3, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d20d      	bcs.n	80059a4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005988:	883a      	ldrh	r2, [r7, #0]
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	429a      	cmp	r2, r3
 800598e:	d901      	bls.n	8005994 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005990:	2301      	movs	r3, #1
 8005992:	e014      	b.n	80059be <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005994:	887a      	ldrh	r2, [r7, #2]
 8005996:	883b      	ldrh	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d901      	bls.n	80059a0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800599c:	2301      	movs	r3, #1
 800599e:	e00e      	b.n	80059be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e00c      	b.n	80059be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80059a4:	883a      	ldrh	r2, [r7, #0]
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d907      	bls.n	80059bc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	883b      	ldrh	r3, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d901      	bls.n	80059b8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e002      	b.n	80059be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80059bc:	2300      	movs	r3, #0
    }
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc90      	pop	{r4, r7}
 80059c6:	4770      	bx	lr

080059c8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80059ee:	8b3b      	ldrh	r3, [r7, #24]
 80059f0:	893a      	ldrh	r2, [r7, #8]
 80059f2:	f7ff ffb6 	bl	8005962 <u8g2_is_intersection_decision_tree>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <u8g2_IsIntersection+0x38>
    return 0; 
 80059fc:	2300      	movs	r3, #0
 80059fe:	e00a      	b.n	8005a16 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	897a      	ldrh	r2, [r7, #10]
 8005a10:	f7ff ffa7 	bl	8005962 <u8g2_is_intersection_decision_tree>
 8005a14:	4603      	mov	r3, r0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <u8g2_ll_hvline_horizontal_right_lsb>:
    all clipping done
*/

/* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b089      	sub	sp, #36	@ 0x24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	817b      	strh	r3, [r7, #10]
 8005a30:	460b      	mov	r3, r1
 8005a32:	813b      	strh	r3, [r7, #8]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	7c1b      	ldrb	r3, [r3, #16]
 8005a3e:	76bb      	strb	r3, [r7, #26]

  bit_pos = x;		/* overflow truncate is ok here... */
 8005a40:	897b      	ldrh	r3, [r7, #10]
 8005a42:	767b      	strb	r3, [r7, #25]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005a44:	7e7b      	ldrb	r3, [r7, #25]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	767b      	strb	r3, [r7, #25]
  mask = 128;
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	76fb      	strb	r3, [r7, #27]
  mask >>= bit_pos;
 8005a50:	7efa      	ldrb	r2, [r7, #27]
 8005a52:	7e7b      	ldrb	r3, [r7, #25]
 8005a54:	fa42 f303 	asr.w	r3, r2, r3
 8005a58:	76fb      	strb	r3, [r7, #27]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	82fb      	strh	r3, [r7, #22]
  offset *= tile_width;
 8005a5e:	7ebb      	ldrb	r3, [r7, #26]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8afa      	ldrh	r2, [r7, #22]
 8005a64:	fb12 f303 	smulbb	r3, r2, r3
 8005a68:	82fb      	strh	r3, [r7, #22]
  offset += x>>3;
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	4413      	add	r3, r2
 8005a74:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8005a84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d129      	bne.n	8005ae0 <u8g2_ll_hvline_horizontal_right_lsb+0xc2>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d806      	bhi.n	8005aa4 <u8g2_ll_hvline_horizontal_right_lsb+0x86>
	*ptr |= mask;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	7efb      	ldrb	r3, [r7, #27]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d006      	beq.n	8005abc <u8g2_ll_hvline_horizontal_right_lsb+0x9e>
	*ptr ^= mask;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	7efb      	ldrb	r3, [r7, #27]
 8005ab4:	4053      	eors	r3, r2
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 8005abc:	7efb      	ldrb	r3, [r7, #27]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	76fb      	strb	r3, [r7, #27]
      if ( mask == 0 )
 8005ac2:	7efb      	ldrb	r3, [r7, #27]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <u8g2_ll_hvline_horizontal_right_lsb+0xb4>
      {
	mask = 128;
 8005ac8:	2380      	movs	r3, #128	@ 0x80
 8005aca:	76fb      	strb	r3, [r7, #27]
        ptr++;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
      }
      
      //x++;
      len--;
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	80fb      	strh	r3, [r7, #6]
    } while( len != 0 );
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1d6      	bne.n	8005a8c <u8g2_ll_hvline_horizontal_right_lsb+0x6e>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 8005ade:	e021      	b.n	8005b24 <u8g2_ll_hvline_horizontal_right_lsb+0x106>
      if ( u8g2->draw_color <= 1 )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d806      	bhi.n	8005af8 <u8g2_ll_hvline_horizontal_right_lsb+0xda>
	*ptr |= mask;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	7efb      	ldrb	r3, [r7, #27]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d006      	beq.n	8005b10 <u8g2_ll_hvline_horizontal_right_lsb+0xf2>
	*ptr ^= mask;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	7efb      	ldrb	r3, [r7, #27]
 8005b08:	4053      	eors	r3, r2
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 8005b10:	7ebb      	ldrb	r3, [r7, #26]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	61fb      	str	r3, [r7, #28]
      len--;
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	80fb      	strh	r3, [r7, #6]
    } while( len != 0 );
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1dd      	bne.n	8005ae0 <u8g2_ll_hvline_horizontal_right_lsb+0xc2>
}
 8005b24:	bf00      	nop
 8005b26:	3724      	adds	r7, #36	@ 0x24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	79fa      	ldrb	r2, [r7, #7]
 8005b94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ffa9 	bl	8005b30 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fd84 	bl	80056ec <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c08:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005c0a:	89fb      	ldrh	r3, [r7, #14]
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	89fa      	ldrh	r2, [r7, #14]
 8005c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	7c1b      	ldrb	r3, [r3, #16]
 8005c1a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	89fa      	ldrh	r2, [r7, #14]
 8005c26:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c2e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	89fa      	ldrh	r2, [r7, #14]
 8005c3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c42:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8005c4c:	4413      	add	r3, r2
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	7c52      	ldrb	r2, [r2, #17]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	dd07      	ble.n	8005c66 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	7c5b      	ldrb	r3, [r3, #17]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005c66:	89fb      	ldrh	r3, [r7, #14]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	8a9a      	ldrh	r2, [r3, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	8ada      	ldrh	r2, [r3, #22]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fe75 	bl	80059c8 <u8g2_IsIntersection>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005cec:	e03b      	b.n	8005d66 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d205      	bcs.n	8005d12 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d905      	bls.n	8005d2e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d205      	bcs.n	8005d4a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d905      	bls.n	8005d66 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff3c 	bl	8005bf4 <u8g2_update_dimension_common>
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d30a      	bcc.n	8005dce <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff65 	bl	8005cb4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af02      	add	r7, sp, #8
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4603      	mov	r3, r0
 8005e02:	817b      	strh	r3, [r7, #10]
 8005e04:	460b      	mov	r3, r1
 8005e06:	813b      	strh	r3, [r7, #8]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e12:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005e14:	8aba      	ldrh	r2, [r7, #20]
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e22:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005e24:	8afa      	ldrh	r2, [r7, #22]
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8005e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005e34:	8abb      	ldrh	r3, [r7, #20]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8005e3a:	8afa      	ldrh	r2, [r7, #22]
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	82fb      	strh	r3, [r7, #22]
 8005e42:	e00a      	b.n	8005e5a <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d106      	bne.n	8005e5a <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8005e4c:	8afb      	ldrh	r3, [r7, #22]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8005e52:	8aba      	ldrh	r2, [r7, #20]
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8005e5a:	88f8      	ldrh	r0, [r7, #6]
 8005e5c:	8aba      	ldrh	r2, [r7, #20]
 8005e5e:	8af9      	ldrh	r1, [r7, #22]
 8005e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4603      	mov	r3, r0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fcb7 	bl	80057dc <u8g2_draw_hv_line_2dir>
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <u8x8_ascii_next+0x18>
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	2b0a      	cmp	r3, #10
 8005ea8:	d102      	bne.n	8005eb0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005eae:	e001      	b.n	8005eb4 <u8x8_ascii_next+0x22>
  return b;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	b29b      	uxth	r3, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691c      	ldr	r4, [r3, #16]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2120      	movs	r1, #32
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	47a0      	blx	r4
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}

08005ee4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	460b      	mov	r3, r1
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691c      	ldr	r4, [r3, #16]
 8005ef6:	7afa      	ldrb	r2, [r7, #11]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2117      	movs	r1, #23
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	47a0      	blx	r4
 8005f00:	4603      	mov	r3, r0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd90      	pop	{r4, r7, pc}

08005f0a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005f16:	1cfb      	adds	r3, r7, #3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ffe1 	bl	8005ee4 <u8x8_byte_SendBytes>
 8005f22:	4603      	mov	r3, r0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68dc      	ldr	r4, [r3, #12]
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2115      	movs	r1, #21
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	47a0      	blx	r4
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd90      	pop	{r4, r7, pc}

08005f50 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68dc      	ldr	r4, [r3, #12]
 8005f62:	7afa      	ldrb	r2, [r7, #11]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2117      	movs	r1, #23
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	47a0      	blx	r4
 8005f6c:	4603      	mov	r3, r0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd90      	pop	{r4, r7, pc}

08005f76 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005f76:	b590      	push	{r4, r7, lr}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68dc      	ldr	r4, [r3, #12]
 8005f82:	2300      	movs	r3, #0
 8005f84:	2200      	movs	r2, #0
 8005f86:	2118      	movs	r1, #24
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	47a0      	blx	r4
 8005f8c:	4603      	mov	r3, r0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}

08005f96 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005f96:	b590      	push	{r4, r7, lr}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68dc      	ldr	r4, [r3, #12]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2119      	movs	r1, #25
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	47a0      	blx	r4
 8005fac:	4603      	mov	r3, r0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
	...

08005fb8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	72fb      	strb	r3, [r7, #11]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	3b14      	subs	r3, #20
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d82f      	bhi.n	8006032 <u8x8_cad_001+0x7a>
 8005fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <u8x8_cad_001+0x20>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08006021 	.word	0x08006021
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006021 	.word	0x08006021
 8005fec:	08006021 	.word	0x08006021
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff64 	bl	8005ec0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005ff8:	7abb      	ldrb	r3, [r7, #10]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff ff84 	bl	8005f0a <u8x8_byte_SendByte>
      break;
 8006002:	e018      	b.n	8006036 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8006004:	2100      	movs	r1, #0
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff ff5a 	bl	8005ec0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800600c:	7abb      	ldrb	r3, [r7, #10]
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ff7a 	bl	8005f0a <u8x8_byte_SendByte>
      break;
 8006016:	e00e      	b.n	8006036 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8006018:	2101      	movs	r1, #1
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff ff50 	bl	8005ec0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691c      	ldr	r4, [r3, #16]
 8006024:	7aba      	ldrb	r2, [r7, #10]
 8006026:	7af9      	ldrb	r1, [r7, #11]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	47a0      	blx	r4
 800602e:	4603      	mov	r3, r0
 8006030:	e002      	b.n	8006038 <u8x8_cad_001+0x80>
    default:
      return 0;
 8006032:	2300      	movs	r3, #0
 8006034:	e000      	b.n	8006038 <u8x8_cad_001+0x80>
  }
  return 1;
 8006036:	2301      	movs	r3, #1
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bd90      	pop	{r4, r7, pc}

08006040 <u8x8_d_ls013b7dh03_128x128>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_ls013b7dh03_128x128(u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, void *arg_ptr)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	72fb      	strb	r3, [r7, #11]
 800604e:	4613      	mov	r3, r2
 8006050:	72bb      	strb	r3, [r7, #10]
  uint8_t y, c, i;
  uint8_t *ptr;
  switch(msg)
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	3b09      	subs	r3, #9
 8006056:	2b06      	cmp	r3, #6
 8006058:	f200 80b1 	bhi.w	80061be <u8x8_d_ls013b7dh03_128x128+0x17e>
 800605c:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <u8x8_d_ls013b7dh03_128x128+0x24>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006081 	.word	0x08006081
 8006068:	0800608b 	.word	0x0800608b
 800606c:	080061c3 	.word	0x080061c3
 8006070:	080061bf 	.word	0x080061bf
 8006074:	080061bf 	.word	0x080061bf
 8006078:	080061bf 	.word	0x080061bf
 800607c:	080060af 	.word	0x080060af
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ls013b7dh03_128x128_display_info);
 8006080:	4953      	ldr	r1, [pc, #332]	@ (80061d0 <u8x8_d_ls013b7dh03_128x128+0x190>)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f8a6 	bl	80061d4 <u8x8_d_helper_display_setup_memory>
      break;
 8006088:	e09c      	b.n	80061c4 <u8x8_d_ls013b7dh03_128x128+0x184>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f8b6 	bl	80061fc <u8x8_d_helper_display_init>

      /* clear screen */
      u8x8_cad_StartTransfer(u8x8);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff ff70 	bl	8005f76 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, SWAP8(LS013B7DH03_CMD_ALL_CLEAR) );
 8006096:	2120      	movs	r1, #32
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff ff47 	bl	8005f2c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, LS013B7DH03_VAL_TRAILER);
 800609e:	2100      	movs	r1, #0
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ff43 	bl	8005f2c <u8x8_cad_SendCmd>
      u8x8_cad_EndTransfer(u8x8);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff75 	bl	8005f96 <u8x8_cad_EndTransfer>

      break;
 80060ac:	e08a      	b.n	80061c4 <u8x8_d_ls013b7dh03_128x128+0x184>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      /* not available for the ls013b7dh03 */
      break;
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      /* each tile is 8 lines, with the data starting at the left edge */
      y = ((((u8x8_tile_t *)arg_ptr)->y_pos) * 8) + 1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	799b      	ldrb	r3, [r3, #6]
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	3301      	adds	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]

      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	791b      	ldrb	r3, [r3, #4]
 80060be:	75bb      	strb	r3, [r7, #22]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	61bb      	str	r3, [r7, #24]

      /* send data mode byte */
      u8x8_cad_StartTransfer(u8x8);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff ff55 	bl	8005f76 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, SWAP8(LS013B7DH03_CMD_UPDATE) );
 80060cc:	2180      	movs	r1, #128	@ 0x80
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ff2c 	bl	8005f2c <u8x8_cad_SendCmd>

      /* send 8 lines of 16 bytes (=128 pixels) */
      for( i = 0; i < 8; i++ )
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e066      	b.n	80061a8 <u8x8_d_ls013b7dh03_128x128+0x168>
      {
        u8x8_cad_SendCmd(u8x8, SWAP8(y + i) );
 80060da:	7dfa      	ldrb	r2, [r7, #23]
 80060dc:	7ffb      	ldrb	r3, [r7, #31]
 80060de:	4413      	add	r3, r2
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	09db      	lsrs	r3, r3, #7
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	b25a      	sxtb	r2, r3
 80060e8:	7df9      	ldrb	r1, [r7, #23]
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
 80060ec:	440b      	add	r3, r1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	115b      	asrs	r3, r3, #5
 80060f2:	b25b      	sxtb	r3, r3
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	7df9      	ldrb	r1, [r7, #23]
 8006100:	7ffb      	ldrb	r3, [r7, #31]
 8006102:	440b      	add	r3, r1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	10db      	asrs	r3, r3, #3
 8006108:	b25b      	sxtb	r3, r3
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	b25b      	sxtb	r3, r3
 8006110:	4313      	orrs	r3, r2
 8006112:	b25a      	sxtb	r2, r3
 8006114:	7df9      	ldrb	r1, [r7, #23]
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	440b      	add	r3, r1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	105b      	asrs	r3, r3, #1
 800611e:	b25b      	sxtb	r3, r3
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	b25b      	sxtb	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b25a      	sxtb	r2, r3
 800612a:	7df9      	ldrb	r1, [r7, #23]
 800612c:	7ffb      	ldrb	r3, [r7, #31]
 800612e:	440b      	add	r3, r1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	b25b      	sxtb	r3, r3
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	b25b      	sxtb	r3, r3
 800613c:	4313      	orrs	r3, r2
 800613e:	b25a      	sxtb	r2, r3
 8006140:	7df9      	ldrb	r1, [r7, #23]
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	440b      	add	r3, r1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	b25b      	sxtb	r3, r3
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	b25b      	sxtb	r3, r3
 8006152:	4313      	orrs	r3, r2
 8006154:	b25a      	sxtb	r2, r3
 8006156:	7df9      	ldrb	r1, [r7, #23]
 8006158:	7ffb      	ldrb	r3, [r7, #31]
 800615a:	440b      	add	r3, r1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	015b      	lsls	r3, r3, #5
 8006160:	b25b      	sxtb	r3, r3
 8006162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006166:	b25b      	sxtb	r3, r3
 8006168:	4313      	orrs	r3, r2
 800616a:	b25a      	sxtb	r2, r3
 800616c:	7df9      	ldrb	r1, [r7, #23]
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	440b      	add	r3, r1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	01db      	lsls	r3, r3, #7
 8006176:	b25b      	sxtb	r3, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	b25b      	sxtb	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fed3 	bl	8005f2c <u8x8_cad_SendCmd>
        u8x8_cad_SendData(u8x8, c, ptr);
 8006186:	7dbb      	ldrb	r3, [r7, #22]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4619      	mov	r1, r3
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fedf 	bl	8005f50 <u8x8_cad_SendData>
        u8x8_cad_SendCmd(u8x8, LS013B7DH03_VAL_TRAILER);
 8006192:	2100      	movs	r1, #0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff fec9 	bl	8005f2c <u8x8_cad_SendCmd>

        ptr += c;
 800619a:	7dbb      	ldrb	r3, [r7, #22]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4413      	add	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 80061a2:	7ffb      	ldrb	r3, [r7, #31]
 80061a4:	3301      	adds	r3, #1
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	7ffb      	ldrb	r3, [r7, #31]
 80061aa:	2b07      	cmp	r3, #7
 80061ac:	d995      	bls.n	80060da <u8x8_d_ls013b7dh03_128x128+0x9a>
      }

      /* finish with a trailing byte */
      u8x8_cad_SendCmd(u8x8, LS013B7DH03_VAL_TRAILER);
 80061ae:	2100      	movs	r1, #0
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff febb 	bl	8005f2c <u8x8_cad_SendCmd>
      u8x8_cad_EndTransfer(u8x8);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff feed 	bl	8005f96 <u8x8_cad_EndTransfer>

      break;
 80061bc:	e002      	b.n	80061c4 <u8x8_d_ls013b7dh03_128x128+0x184>
    default:
      return 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	e001      	b.n	80061c6 <u8x8_d_ls013b7dh03_128x128+0x186>
      break;
 80061c2:	bf00      	nop
  }
  return 1;
 80061c4:	2301      	movs	r3, #1
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	08007090 	.word	0x08007090

080061d4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	7c9a      	ldrb	r2, [r3, #18]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695c      	ldr	r4, [r3, #20]
 8006208:	2300      	movs	r3, #0
 800620a:	2200      	movs	r2, #0
 800620c:	2128      	movs	r1, #40	@ 0x28
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68dc      	ldr	r4, [r3, #12]
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	2114      	movs	r1, #20
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8006220:	2201      	movs	r2, #1
 8006222:	214b      	movs	r1, #75	@ 0x4b
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f886 	bl	8006336 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	461a      	mov	r2, r3
 8006232:	2129      	movs	r1, #41	@ 0x29
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f87e 	bl	8006336 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800623a:	2200      	movs	r2, #0
 800623c:	214b      	movs	r1, #75	@ 0x4b
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f879 	bl	8006336 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	461a      	mov	r2, r3
 800624c:	2129      	movs	r1, #41	@ 0x29
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f871 	bl	8006336 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006254:	2201      	movs	r2, #1
 8006256:	214b      	movs	r1, #75	@ 0x4b
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f86c 	bl	8006336 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	795b      	ldrb	r3, [r3, #5]
 8006264:	461a      	mov	r2, r3
 8006266:	2129      	movs	r1, #41	@ 0x29
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f864 	bl	8006336 <u8x8_gpio_call>
}    
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}

08006276 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8006276:	b590      	push	{r4, r7, lr}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	461a      	mov	r2, r3
 8006284:	4603      	mov	r3, r0
 8006286:	70fb      	strb	r3, [r7, #3]
 8006288:	460b      	mov	r3, r1
 800628a:	70bb      	strb	r3, [r7, #2]
 800628c:	4613      	mov	r3, r2
 800628e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8006294:	78bb      	ldrb	r3, [r7, #2]
 8006296:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8006298:	787b      	ldrb	r3, [r7, #1]
 800629a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689c      	ldr	r4, [r3, #8]
 80062a4:	f107 0308 	add.w	r3, r7, #8
 80062a8:	2201      	movs	r2, #1
 80062aa:	210f      	movs	r1, #15
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	47a0      	blx	r4
 80062b0:	4603      	mov	r3, r0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd90      	pop	{r4, r7, pc}

080062ba <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80062ba:	b590      	push	{r4, r7, lr}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689c      	ldr	r4, [r3, #8]
 80062c6:	2300      	movs	r3, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	2109      	movs	r1, #9
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	47a0      	blx	r4
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}

080062d8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689c      	ldr	r4, [r3, #8]
 80062e4:	2300      	movs	r3, #0
 80062e6:	2200      	movs	r2, #0
 80062e8:	210a      	movs	r1, #10
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd90      	pop	{r4, r7, pc}

080062f6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80062f6:	b590      	push	{r4, r7, lr}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689c      	ldr	r4, [r3, #8]
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	2300      	movs	r3, #0
 800630a:	210b      	movs	r1, #11
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	47a0      	blx	r4
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bd90      	pop	{r4, r7, pc}

08006318 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689c      	ldr	r4, [r3, #8]
 8006324:	2300      	movs	r3, #0
 8006326:	2200      	movs	r2, #0
 8006328:	2110      	movs	r1, #16
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	47a0      	blx	r4
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}

08006336 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006336:	b590      	push	{r4, r7, lr}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
 8006342:	4613      	mov	r3, r2
 8006344:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695c      	ldr	r4, [r3, #20]
 800634a:	78ba      	ldrb	r2, [r7, #2]
 800634c:	78f9      	ldrb	r1, [r7, #3]
 800634e:	2300      	movs	r3, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	47a0      	blx	r4
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bd90      	pop	{r4, r7, pc}

0800635c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	72fb      	strb	r3, [r7, #11]
 800636a:	4613      	mov	r3, r2
 800636c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <u8x8_SetupDefaults+0x58>)
 800638e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a10      	ldr	r2, [pc, #64]	@ (80063d4 <u8x8_SetupDefaults+0x58>)
 8006394:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a0e      	ldr	r2, [pc, #56]	@ (80063d4 <u8x8_SetupDefaults+0x58>)
 800639a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0d      	ldr	r2, [pc, #52]	@ (80063d4 <u8x8_SetupDefaults+0x58>)
 80063a0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	22ff      	movs	r2, #255	@ 0xff
 80063bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	22ff      	movs	r2, #255	@ 0xff
 80063c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	0800635d 	.word	0x0800635d

080063d8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff ffc8 	bl	800637c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff58 	bl	80062ba <u8x8_SetupMemory>
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <siprintf>:
 8006414:	b40e      	push	{r1, r2, r3}
 8006416:	b500      	push	{lr}
 8006418:	b09c      	sub	sp, #112	@ 0x70
 800641a:	ab1d      	add	r3, sp, #116	@ 0x74
 800641c:	9002      	str	r0, [sp, #8]
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006424:	4809      	ldr	r0, [pc, #36]	@ (800644c <siprintf+0x38>)
 8006426:	9107      	str	r1, [sp, #28]
 8006428:	9104      	str	r1, [sp, #16]
 800642a:	4909      	ldr	r1, [pc, #36]	@ (8006450 <siprintf+0x3c>)
 800642c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006430:	9105      	str	r1, [sp, #20]
 8006432:	6800      	ldr	r0, [r0, #0]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	a902      	add	r1, sp, #8
 8006438:	f000 f994 	bl	8006764 <_svfiprintf_r>
 800643c:	9b02      	ldr	r3, [sp, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	b01c      	add	sp, #112	@ 0x70
 8006444:	f85d eb04 	ldr.w	lr, [sp], #4
 8006448:	b003      	add	sp, #12
 800644a:	4770      	bx	lr
 800644c:	20000014 	.word	0x20000014
 8006450:	ffff0208 	.word	0xffff0208

08006454 <memset>:
 8006454:	4402      	add	r2, r0
 8006456:	4603      	mov	r3, r0
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	f803 1b01 	strb.w	r1, [r3], #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <__errno>:
 8006464:	4b01      	ldr	r3, [pc, #4]	@ (800646c <__errno+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000014 	.word	0x20000014

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4d0d      	ldr	r5, [pc, #52]	@ (80064a8 <__libc_init_array+0x38>)
 8006474:	4c0d      	ldr	r4, [pc, #52]	@ (80064ac <__libc_init_array+0x3c>)
 8006476:	1b64      	subs	r4, r4, r5
 8006478:	10a4      	asrs	r4, r4, #2
 800647a:	2600      	movs	r6, #0
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	4d0b      	ldr	r5, [pc, #44]	@ (80064b0 <__libc_init_array+0x40>)
 8006482:	4c0c      	ldr	r4, [pc, #48]	@ (80064b4 <__libc_init_array+0x44>)
 8006484:	f000 fc66 	bl	8006d54 <_init>
 8006488:	1b64      	subs	r4, r4, r5
 800648a:	10a4      	asrs	r4, r4, #2
 800648c:	2600      	movs	r6, #0
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	080070e4 	.word	0x080070e4
 80064ac:	080070e4 	.word	0x080070e4
 80064b0:	080070e4 	.word	0x080070e4
 80064b4:	080070e8 	.word	0x080070e8

080064b8 <__retarget_lock_acquire_recursive>:
 80064b8:	4770      	bx	lr

080064ba <__retarget_lock_release_recursive>:
 80064ba:	4770      	bx	lr

080064bc <_free_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4605      	mov	r5, r0
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d041      	beq.n	8006548 <_free_r+0x8c>
 80064c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c8:	1f0c      	subs	r4, r1, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfb8      	it	lt
 80064ce:	18e4      	addlt	r4, r4, r3
 80064d0:	f000 f8e0 	bl	8006694 <__malloc_lock>
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <_free_r+0x90>)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	b933      	cbnz	r3, 80064e8 <_free_r+0x2c>
 80064da:	6063      	str	r3, [r4, #4]
 80064dc:	6014      	str	r4, [r2, #0]
 80064de:	4628      	mov	r0, r5
 80064e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e4:	f000 b8dc 	b.w	80066a0 <__malloc_unlock>
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	d908      	bls.n	80064fe <_free_r+0x42>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	1821      	adds	r1, r4, r0
 80064f0:	428b      	cmp	r3, r1
 80064f2:	bf01      	itttt	eq
 80064f4:	6819      	ldreq	r1, [r3, #0]
 80064f6:	685b      	ldreq	r3, [r3, #4]
 80064f8:	1809      	addeq	r1, r1, r0
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	e7ed      	b.n	80064da <_free_r+0x1e>
 80064fe:	461a      	mov	r2, r3
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b10b      	cbz	r3, 8006508 <_free_r+0x4c>
 8006504:	42a3      	cmp	r3, r4
 8006506:	d9fa      	bls.n	80064fe <_free_r+0x42>
 8006508:	6811      	ldr	r1, [r2, #0]
 800650a:	1850      	adds	r0, r2, r1
 800650c:	42a0      	cmp	r0, r4
 800650e:	d10b      	bne.n	8006528 <_free_r+0x6c>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	4401      	add	r1, r0
 8006514:	1850      	adds	r0, r2, r1
 8006516:	4283      	cmp	r3, r0
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	d1e0      	bne.n	80064de <_free_r+0x22>
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	6053      	str	r3, [r2, #4]
 8006522:	4408      	add	r0, r1
 8006524:	6010      	str	r0, [r2, #0]
 8006526:	e7da      	b.n	80064de <_free_r+0x22>
 8006528:	d902      	bls.n	8006530 <_free_r+0x74>
 800652a:	230c      	movs	r3, #12
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	e7d6      	b.n	80064de <_free_r+0x22>
 8006530:	6820      	ldr	r0, [r4, #0]
 8006532:	1821      	adds	r1, r4, r0
 8006534:	428b      	cmp	r3, r1
 8006536:	bf04      	itt	eq
 8006538:	6819      	ldreq	r1, [r3, #0]
 800653a:	685b      	ldreq	r3, [r3, #4]
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	bf04      	itt	eq
 8006540:	1809      	addeq	r1, r1, r0
 8006542:	6021      	streq	r1, [r4, #0]
 8006544:	6054      	str	r4, [r2, #4]
 8006546:	e7ca      	b.n	80064de <_free_r+0x22>
 8006548:	bd38      	pop	{r3, r4, r5, pc}
 800654a:	bf00      	nop
 800654c:	20000ea4 	.word	0x20000ea4

08006550 <sbrk_aligned>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4e0f      	ldr	r6, [pc, #60]	@ (8006590 <sbrk_aligned+0x40>)
 8006554:	460c      	mov	r4, r1
 8006556:	6831      	ldr	r1, [r6, #0]
 8006558:	4605      	mov	r5, r0
 800655a:	b911      	cbnz	r1, 8006562 <sbrk_aligned+0x12>
 800655c:	f000 fba6 	bl	8006cac <_sbrk_r>
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fba1 	bl	8006cac <_sbrk_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d103      	bne.n	8006576 <sbrk_aligned+0x26>
 800656e:	f04f 34ff 	mov.w	r4, #4294967295
 8006572:	4620      	mov	r0, r4
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	1cc4      	adds	r4, r0, #3
 8006578:	f024 0403 	bic.w	r4, r4, #3
 800657c:	42a0      	cmp	r0, r4
 800657e:	d0f8      	beq.n	8006572 <sbrk_aligned+0x22>
 8006580:	1a21      	subs	r1, r4, r0
 8006582:	4628      	mov	r0, r5
 8006584:	f000 fb92 	bl	8006cac <_sbrk_r>
 8006588:	3001      	adds	r0, #1
 800658a:	d1f2      	bne.n	8006572 <sbrk_aligned+0x22>
 800658c:	e7ef      	b.n	800656e <sbrk_aligned+0x1e>
 800658e:	bf00      	nop
 8006590:	20000ea0 	.word	0x20000ea0

08006594 <_malloc_r>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	1ccd      	adds	r5, r1, #3
 800659a:	f025 0503 	bic.w	r5, r5, #3
 800659e:	3508      	adds	r5, #8
 80065a0:	2d0c      	cmp	r5, #12
 80065a2:	bf38      	it	cc
 80065a4:	250c      	movcc	r5, #12
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	4606      	mov	r6, r0
 80065aa:	db01      	blt.n	80065b0 <_malloc_r+0x1c>
 80065ac:	42a9      	cmp	r1, r5
 80065ae:	d904      	bls.n	80065ba <_malloc_r+0x26>
 80065b0:	230c      	movs	r3, #12
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	2000      	movs	r0, #0
 80065b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006690 <_malloc_r+0xfc>
 80065be:	f000 f869 	bl	8006694 <__malloc_lock>
 80065c2:	f8d8 3000 	ldr.w	r3, [r8]
 80065c6:	461c      	mov	r4, r3
 80065c8:	bb44      	cbnz	r4, 800661c <_malloc_r+0x88>
 80065ca:	4629      	mov	r1, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffbf 	bl	8006550 <sbrk_aligned>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	4604      	mov	r4, r0
 80065d6:	d158      	bne.n	800668a <_malloc_r+0xf6>
 80065d8:	f8d8 4000 	ldr.w	r4, [r8]
 80065dc:	4627      	mov	r7, r4
 80065de:	2f00      	cmp	r7, #0
 80065e0:	d143      	bne.n	800666a <_malloc_r+0xd6>
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	d04b      	beq.n	800667e <_malloc_r+0xea>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	eb04 0903 	add.w	r9, r4, r3
 80065f0:	f000 fb5c 	bl	8006cac <_sbrk_r>
 80065f4:	4581      	cmp	r9, r0
 80065f6:	d142      	bne.n	800667e <_malloc_r+0xea>
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	1a6d      	subs	r5, r5, r1
 80065fc:	4629      	mov	r1, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	f7ff ffa6 	bl	8006550 <sbrk_aligned>
 8006604:	3001      	adds	r0, #1
 8006606:	d03a      	beq.n	800667e <_malloc_r+0xea>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	442b      	add	r3, r5
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	f8d8 3000 	ldr.w	r3, [r8]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	bb62      	cbnz	r2, 8006670 <_malloc_r+0xdc>
 8006616:	f8c8 7000 	str.w	r7, [r8]
 800661a:	e00f      	b.n	800663c <_malloc_r+0xa8>
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	1b52      	subs	r2, r2, r5
 8006620:	d420      	bmi.n	8006664 <_malloc_r+0xd0>
 8006622:	2a0b      	cmp	r2, #11
 8006624:	d917      	bls.n	8006656 <_malloc_r+0xc2>
 8006626:	1961      	adds	r1, r4, r5
 8006628:	42a3      	cmp	r3, r4
 800662a:	6025      	str	r5, [r4, #0]
 800662c:	bf18      	it	ne
 800662e:	6059      	strne	r1, [r3, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	bf08      	it	eq
 8006634:	f8c8 1000 	streq.w	r1, [r8]
 8006638:	5162      	str	r2, [r4, r5]
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	4630      	mov	r0, r6
 800663e:	f000 f82f 	bl	80066a0 <__malloc_unlock>
 8006642:	f104 000b 	add.w	r0, r4, #11
 8006646:	1d23      	adds	r3, r4, #4
 8006648:	f020 0007 	bic.w	r0, r0, #7
 800664c:	1ac2      	subs	r2, r0, r3
 800664e:	bf1c      	itt	ne
 8006650:	1a1b      	subne	r3, r3, r0
 8006652:	50a3      	strne	r3, [r4, r2]
 8006654:	e7af      	b.n	80065b6 <_malloc_r+0x22>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	42a3      	cmp	r3, r4
 800665a:	bf0c      	ite	eq
 800665c:	f8c8 2000 	streq.w	r2, [r8]
 8006660:	605a      	strne	r2, [r3, #4]
 8006662:	e7eb      	b.n	800663c <_malloc_r+0xa8>
 8006664:	4623      	mov	r3, r4
 8006666:	6864      	ldr	r4, [r4, #4]
 8006668:	e7ae      	b.n	80065c8 <_malloc_r+0x34>
 800666a:	463c      	mov	r4, r7
 800666c:	687f      	ldr	r7, [r7, #4]
 800666e:	e7b6      	b.n	80065de <_malloc_r+0x4a>
 8006670:	461a      	mov	r2, r3
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	42a3      	cmp	r3, r4
 8006676:	d1fb      	bne.n	8006670 <_malloc_r+0xdc>
 8006678:	2300      	movs	r3, #0
 800667a:	6053      	str	r3, [r2, #4]
 800667c:	e7de      	b.n	800663c <_malloc_r+0xa8>
 800667e:	230c      	movs	r3, #12
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f80c 	bl	80066a0 <__malloc_unlock>
 8006688:	e794      	b.n	80065b4 <_malloc_r+0x20>
 800668a:	6005      	str	r5, [r0, #0]
 800668c:	e7d6      	b.n	800663c <_malloc_r+0xa8>
 800668e:	bf00      	nop
 8006690:	20000ea4 	.word	0x20000ea4

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	@ (800669c <__malloc_lock+0x8>)
 8006696:	f7ff bf0f 	b.w	80064b8 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	20000e9c 	.word	0x20000e9c

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	@ (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f7ff bf0a 	b.w	80064ba <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	20000e9c 	.word	0x20000e9c

080066ac <__ssputs_r>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	688e      	ldr	r6, [r1, #8]
 80066b2:	461f      	mov	r7, r3
 80066b4:	42be      	cmp	r6, r7
 80066b6:	680b      	ldr	r3, [r1, #0]
 80066b8:	4682      	mov	sl, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4690      	mov	r8, r2
 80066be:	d82d      	bhi.n	800671c <__ssputs_r+0x70>
 80066c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066c8:	d026      	beq.n	8006718 <__ssputs_r+0x6c>
 80066ca:	6965      	ldr	r5, [r4, #20]
 80066cc:	6909      	ldr	r1, [r1, #16]
 80066ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d2:	eba3 0901 	sub.w	r9, r3, r1
 80066d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066da:	1c7b      	adds	r3, r7, #1
 80066dc:	444b      	add	r3, r9
 80066de:	106d      	asrs	r5, r5, #1
 80066e0:	429d      	cmp	r5, r3
 80066e2:	bf38      	it	cc
 80066e4:	461d      	movcc	r5, r3
 80066e6:	0553      	lsls	r3, r2, #21
 80066e8:	d527      	bpl.n	800673a <__ssputs_r+0x8e>
 80066ea:	4629      	mov	r1, r5
 80066ec:	f7ff ff52 	bl	8006594 <_malloc_r>
 80066f0:	4606      	mov	r6, r0
 80066f2:	b360      	cbz	r0, 800674e <__ssputs_r+0xa2>
 80066f4:	6921      	ldr	r1, [r4, #16]
 80066f6:	464a      	mov	r2, r9
 80066f8:	f000 fae8 	bl	8006ccc <memcpy>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	6126      	str	r6, [r4, #16]
 800670a:	6165      	str	r5, [r4, #20]
 800670c:	444e      	add	r6, r9
 800670e:	eba5 0509 	sub.w	r5, r5, r9
 8006712:	6026      	str	r6, [r4, #0]
 8006714:	60a5      	str	r5, [r4, #8]
 8006716:	463e      	mov	r6, r7
 8006718:	42be      	cmp	r6, r7
 800671a:	d900      	bls.n	800671e <__ssputs_r+0x72>
 800671c:	463e      	mov	r6, r7
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	4632      	mov	r2, r6
 8006722:	4641      	mov	r1, r8
 8006724:	f000 faa8 	bl	8006c78 <memmove>
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	1b9b      	subs	r3, r3, r6
 800672c:	60a3      	str	r3, [r4, #8]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	4433      	add	r3, r6
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	2000      	movs	r0, #0
 8006736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673a:	462a      	mov	r2, r5
 800673c:	f000 fad4 	bl	8006ce8 <_realloc_r>
 8006740:	4606      	mov	r6, r0
 8006742:	2800      	cmp	r0, #0
 8006744:	d1e0      	bne.n	8006708 <__ssputs_r+0x5c>
 8006746:	6921      	ldr	r1, [r4, #16]
 8006748:	4650      	mov	r0, sl
 800674a:	f7ff feb7 	bl	80064bc <_free_r>
 800674e:	230c      	movs	r3, #12
 8006750:	f8ca 3000 	str.w	r3, [sl]
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800675a:	81a3      	strh	r3, [r4, #12]
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e7e9      	b.n	8006736 <__ssputs_r+0x8a>
	...

08006764 <_svfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4698      	mov	r8, r3
 800676a:	898b      	ldrh	r3, [r1, #12]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	b09d      	sub	sp, #116	@ 0x74
 8006770:	4607      	mov	r7, r0
 8006772:	460d      	mov	r5, r1
 8006774:	4614      	mov	r4, r2
 8006776:	d510      	bpl.n	800679a <_svfiprintf_r+0x36>
 8006778:	690b      	ldr	r3, [r1, #16]
 800677a:	b973      	cbnz	r3, 800679a <_svfiprintf_r+0x36>
 800677c:	2140      	movs	r1, #64	@ 0x40
 800677e:	f7ff ff09 	bl	8006594 <_malloc_r>
 8006782:	6028      	str	r0, [r5, #0]
 8006784:	6128      	str	r0, [r5, #16]
 8006786:	b930      	cbnz	r0, 8006796 <_svfiprintf_r+0x32>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b01d      	add	sp, #116	@ 0x74
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	2340      	movs	r3, #64	@ 0x40
 8006798:	616b      	str	r3, [r5, #20]
 800679a:	2300      	movs	r3, #0
 800679c:	9309      	str	r3, [sp, #36]	@ 0x24
 800679e:	2320      	movs	r3, #32
 80067a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80067a8:	2330      	movs	r3, #48	@ 0x30
 80067aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006948 <_svfiprintf_r+0x1e4>
 80067ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067b2:	f04f 0901 	mov.w	r9, #1
 80067b6:	4623      	mov	r3, r4
 80067b8:	469a      	mov	sl, r3
 80067ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067be:	b10a      	cbz	r2, 80067c4 <_svfiprintf_r+0x60>
 80067c0:	2a25      	cmp	r2, #37	@ 0x25
 80067c2:	d1f9      	bne.n	80067b8 <_svfiprintf_r+0x54>
 80067c4:	ebba 0b04 	subs.w	fp, sl, r4
 80067c8:	d00b      	beq.n	80067e2 <_svfiprintf_r+0x7e>
 80067ca:	465b      	mov	r3, fp
 80067cc:	4622      	mov	r2, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff ff6b 	bl	80066ac <__ssputs_r>
 80067d6:	3001      	adds	r0, #1
 80067d8:	f000 80a7 	beq.w	800692a <_svfiprintf_r+0x1c6>
 80067dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067de:	445a      	add	r2, fp
 80067e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80067e2:	f89a 3000 	ldrb.w	r3, [sl]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 809f 	beq.w	800692a <_svfiprintf_r+0x1c6>
 80067ec:	2300      	movs	r3, #0
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295
 80067f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067f6:	f10a 0a01 	add.w	sl, sl, #1
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	9307      	str	r3, [sp, #28]
 80067fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006802:	931a      	str	r3, [sp, #104]	@ 0x68
 8006804:	4654      	mov	r4, sl
 8006806:	2205      	movs	r2, #5
 8006808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680c:	484e      	ldr	r0, [pc, #312]	@ (8006948 <_svfiprintf_r+0x1e4>)
 800680e:	f7f9 fcb7 	bl	8000180 <memchr>
 8006812:	9a04      	ldr	r2, [sp, #16]
 8006814:	b9d8      	cbnz	r0, 800684e <_svfiprintf_r+0xea>
 8006816:	06d0      	lsls	r0, r2, #27
 8006818:	bf44      	itt	mi
 800681a:	2320      	movmi	r3, #32
 800681c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006820:	0711      	lsls	r1, r2, #28
 8006822:	bf44      	itt	mi
 8006824:	232b      	movmi	r3, #43	@ 0x2b
 8006826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800682a:	f89a 3000 	ldrb.w	r3, [sl]
 800682e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006830:	d015      	beq.n	800685e <_svfiprintf_r+0xfa>
 8006832:	9a07      	ldr	r2, [sp, #28]
 8006834:	4654      	mov	r4, sl
 8006836:	2000      	movs	r0, #0
 8006838:	f04f 0c0a 	mov.w	ip, #10
 800683c:	4621      	mov	r1, r4
 800683e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006842:	3b30      	subs	r3, #48	@ 0x30
 8006844:	2b09      	cmp	r3, #9
 8006846:	d94b      	bls.n	80068e0 <_svfiprintf_r+0x17c>
 8006848:	b1b0      	cbz	r0, 8006878 <_svfiprintf_r+0x114>
 800684a:	9207      	str	r2, [sp, #28]
 800684c:	e014      	b.n	8006878 <_svfiprintf_r+0x114>
 800684e:	eba0 0308 	sub.w	r3, r0, r8
 8006852:	fa09 f303 	lsl.w	r3, r9, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	46a2      	mov	sl, r4
 800685c:	e7d2      	b.n	8006804 <_svfiprintf_r+0xa0>
 800685e:	9b03      	ldr	r3, [sp, #12]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	9103      	str	r1, [sp, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfbb      	ittet	lt
 800686a:	425b      	neglt	r3, r3
 800686c:	f042 0202 	orrlt.w	r2, r2, #2
 8006870:	9307      	strge	r3, [sp, #28]
 8006872:	9307      	strlt	r3, [sp, #28]
 8006874:	bfb8      	it	lt
 8006876:	9204      	strlt	r2, [sp, #16]
 8006878:	7823      	ldrb	r3, [r4, #0]
 800687a:	2b2e      	cmp	r3, #46	@ 0x2e
 800687c:	d10a      	bne.n	8006894 <_svfiprintf_r+0x130>
 800687e:	7863      	ldrb	r3, [r4, #1]
 8006880:	2b2a      	cmp	r3, #42	@ 0x2a
 8006882:	d132      	bne.n	80068ea <_svfiprintf_r+0x186>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	9203      	str	r2, [sp, #12]
 800688c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006890:	3402      	adds	r4, #2
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006958 <_svfiprintf_r+0x1f4>
 8006898:	7821      	ldrb	r1, [r4, #0]
 800689a:	2203      	movs	r2, #3
 800689c:	4650      	mov	r0, sl
 800689e:	f7f9 fc6f 	bl	8000180 <memchr>
 80068a2:	b138      	cbz	r0, 80068b4 <_svfiprintf_r+0x150>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	eba0 000a 	sub.w	r0, r0, sl
 80068aa:	2240      	movs	r2, #64	@ 0x40
 80068ac:	4082      	lsls	r2, r0
 80068ae:	4313      	orrs	r3, r2
 80068b0:	3401      	adds	r4, #1
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b8:	4824      	ldr	r0, [pc, #144]	@ (800694c <_svfiprintf_r+0x1e8>)
 80068ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068be:	2206      	movs	r2, #6
 80068c0:	f7f9 fc5e 	bl	8000180 <memchr>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d036      	beq.n	8006936 <_svfiprintf_r+0x1d2>
 80068c8:	4b21      	ldr	r3, [pc, #132]	@ (8006950 <_svfiprintf_r+0x1ec>)
 80068ca:	bb1b      	cbnz	r3, 8006914 <_svfiprintf_r+0x1b0>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	3307      	adds	r3, #7
 80068d0:	f023 0307 	bic.w	r3, r3, #7
 80068d4:	3308      	adds	r3, #8
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068da:	4433      	add	r3, r6
 80068dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068de:	e76a      	b.n	80067b6 <_svfiprintf_r+0x52>
 80068e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068e4:	460c      	mov	r4, r1
 80068e6:	2001      	movs	r0, #1
 80068e8:	e7a8      	b.n	800683c <_svfiprintf_r+0xd8>
 80068ea:	2300      	movs	r3, #0
 80068ec:	3401      	adds	r4, #1
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	4619      	mov	r1, r3
 80068f2:	f04f 0c0a 	mov.w	ip, #10
 80068f6:	4620      	mov	r0, r4
 80068f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068fc:	3a30      	subs	r2, #48	@ 0x30
 80068fe:	2a09      	cmp	r2, #9
 8006900:	d903      	bls.n	800690a <_svfiprintf_r+0x1a6>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0c6      	beq.n	8006894 <_svfiprintf_r+0x130>
 8006906:	9105      	str	r1, [sp, #20]
 8006908:	e7c4      	b.n	8006894 <_svfiprintf_r+0x130>
 800690a:	fb0c 2101 	mla	r1, ip, r1, r2
 800690e:	4604      	mov	r4, r0
 8006910:	2301      	movs	r3, #1
 8006912:	e7f0      	b.n	80068f6 <_svfiprintf_r+0x192>
 8006914:	ab03      	add	r3, sp, #12
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	462a      	mov	r2, r5
 800691a:	4b0e      	ldr	r3, [pc, #56]	@ (8006954 <_svfiprintf_r+0x1f0>)
 800691c:	a904      	add	r1, sp, #16
 800691e:	4638      	mov	r0, r7
 8006920:	f3af 8000 	nop.w
 8006924:	1c42      	adds	r2, r0, #1
 8006926:	4606      	mov	r6, r0
 8006928:	d1d6      	bne.n	80068d8 <_svfiprintf_r+0x174>
 800692a:	89ab      	ldrh	r3, [r5, #12]
 800692c:	065b      	lsls	r3, r3, #25
 800692e:	f53f af2d 	bmi.w	800678c <_svfiprintf_r+0x28>
 8006932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006934:	e72c      	b.n	8006790 <_svfiprintf_r+0x2c>
 8006936:	ab03      	add	r3, sp, #12
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	462a      	mov	r2, r5
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <_svfiprintf_r+0x1f0>)
 800693e:	a904      	add	r1, sp, #16
 8006940:	4638      	mov	r0, r7
 8006942:	f000 f879 	bl	8006a38 <_printf_i>
 8006946:	e7ed      	b.n	8006924 <_svfiprintf_r+0x1c0>
 8006948:	080070a8 	.word	0x080070a8
 800694c:	080070b2 	.word	0x080070b2
 8006950:	00000000 	.word	0x00000000
 8006954:	080066ad 	.word	0x080066ad
 8006958:	080070ae 	.word	0x080070ae

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4616      	mov	r6, r2
 8006962:	4698      	mov	r8, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800696c:	4293      	cmp	r3, r2
 800696e:	bfb8      	it	lt
 8006970:	4613      	movlt	r3, r2
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006978:	4607      	mov	r7, r0
 800697a:	460c      	mov	r4, r1
 800697c:	b10a      	cbz	r2, 8006982 <_printf_common+0x26>
 800697e:	3301      	adds	r3, #1
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0699      	lsls	r1, r3, #26
 8006986:	bf42      	ittt	mi
 8006988:	6833      	ldrmi	r3, [r6, #0]
 800698a:	3302      	addmi	r3, #2
 800698c:	6033      	strmi	r3, [r6, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d106      	bne.n	80069a4 <_printf_common+0x48>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	dc26      	bgt.n	80069f2 <_printf_common+0x96>
 80069a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	3b00      	subs	r3, #0
 80069ac:	bf18      	it	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d42b      	bmi.n	8006a0c <_printf_common+0xb0>
 80069b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069b8:	4641      	mov	r1, r8
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c8      	blx	r9
 80069be:	3001      	adds	r0, #1
 80069c0:	d01e      	beq.n	8006a00 <_printf_common+0xa4>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	f003 0306 	and.w	r3, r3, #6
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	bf02      	ittt	eq
 80069ce:	68e5      	ldreq	r5, [r4, #12]
 80069d0:	6833      	ldreq	r3, [r6, #0]
 80069d2:	1aed      	subeq	r5, r5, r3
 80069d4:	68a3      	ldr	r3, [r4, #8]
 80069d6:	bf0c      	ite	eq
 80069d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069dc:	2500      	movne	r5, #0
 80069de:	4293      	cmp	r3, r2
 80069e0:	bfc4      	itt	gt
 80069e2:	1a9b      	subgt	r3, r3, r2
 80069e4:	18ed      	addgt	r5, r5, r3
 80069e6:	2600      	movs	r6, #0
 80069e8:	341a      	adds	r4, #26
 80069ea:	42b5      	cmp	r5, r6
 80069ec:	d11a      	bne.n	8006a24 <_printf_common+0xc8>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e008      	b.n	8006a04 <_printf_common+0xa8>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4641      	mov	r1, r8
 80069f8:	4638      	mov	r0, r7
 80069fa:	47c8      	blx	r9
 80069fc:	3001      	adds	r0, #1
 80069fe:	d103      	bne.n	8006a08 <_printf_common+0xac>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	3501      	adds	r5, #1
 8006a0a:	e7c6      	b.n	800699a <_printf_common+0x3e>
 8006a0c:	18e1      	adds	r1, r4, r3
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	2030      	movs	r0, #48	@ 0x30
 8006a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a16:	4422      	add	r2, r4
 8006a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a20:	3302      	adds	r3, #2
 8006a22:	e7c7      	b.n	80069b4 <_printf_common+0x58>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4622      	mov	r2, r4
 8006a28:	4641      	mov	r1, r8
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c8      	blx	r9
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0e6      	beq.n	8006a00 <_printf_common+0xa4>
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7d9      	b.n	80069ea <_printf_common+0x8e>
	...

08006a38 <_printf_i>:
 8006a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	7e0f      	ldrb	r7, [r1, #24]
 8006a3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a40:	2f78      	cmp	r7, #120	@ 0x78
 8006a42:	4691      	mov	r9, r2
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a4e:	d807      	bhi.n	8006a60 <_printf_i+0x28>
 8006a50:	2f62      	cmp	r7, #98	@ 0x62
 8006a52:	d80a      	bhi.n	8006a6a <_printf_i+0x32>
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	f000 80d2 	beq.w	8006bfe <_printf_i+0x1c6>
 8006a5a:	2f58      	cmp	r7, #88	@ 0x58
 8006a5c:	f000 80b9 	beq.w	8006bd2 <_printf_i+0x19a>
 8006a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a68:	e03a      	b.n	8006ae0 <_printf_i+0xa8>
 8006a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a6e:	2b15      	cmp	r3, #21
 8006a70:	d8f6      	bhi.n	8006a60 <_printf_i+0x28>
 8006a72:	a101      	add	r1, pc, #4	@ (adr r1, 8006a78 <_printf_i+0x40>)
 8006a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a78:	08006ad1 	.word	0x08006ad1
 8006a7c:	08006ae5 	.word	0x08006ae5
 8006a80:	08006a61 	.word	0x08006a61
 8006a84:	08006a61 	.word	0x08006a61
 8006a88:	08006a61 	.word	0x08006a61
 8006a8c:	08006a61 	.word	0x08006a61
 8006a90:	08006ae5 	.word	0x08006ae5
 8006a94:	08006a61 	.word	0x08006a61
 8006a98:	08006a61 	.word	0x08006a61
 8006a9c:	08006a61 	.word	0x08006a61
 8006aa0:	08006a61 	.word	0x08006a61
 8006aa4:	08006be5 	.word	0x08006be5
 8006aa8:	08006b0f 	.word	0x08006b0f
 8006aac:	08006b9f 	.word	0x08006b9f
 8006ab0:	08006a61 	.word	0x08006a61
 8006ab4:	08006a61 	.word	0x08006a61
 8006ab8:	08006c07 	.word	0x08006c07
 8006abc:	08006a61 	.word	0x08006a61
 8006ac0:	08006b0f 	.word	0x08006b0f
 8006ac4:	08006a61 	.word	0x08006a61
 8006ac8:	08006a61 	.word	0x08006a61
 8006acc:	08006ba7 	.word	0x08006ba7
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	1d1a      	adds	r2, r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6032      	str	r2, [r6, #0]
 8006ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e09d      	b.n	8006c20 <_printf_i+0x1e8>
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	6820      	ldr	r0, [r4, #0]
 8006ae8:	1d19      	adds	r1, r3, #4
 8006aea:	6031      	str	r1, [r6, #0]
 8006aec:	0606      	lsls	r6, r0, #24
 8006aee:	d501      	bpl.n	8006af4 <_printf_i+0xbc>
 8006af0:	681d      	ldr	r5, [r3, #0]
 8006af2:	e003      	b.n	8006afc <_printf_i+0xc4>
 8006af4:	0645      	lsls	r5, r0, #25
 8006af6:	d5fb      	bpl.n	8006af0 <_printf_i+0xb8>
 8006af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	da03      	bge.n	8006b08 <_printf_i+0xd0>
 8006b00:	232d      	movs	r3, #45	@ 0x2d
 8006b02:	426d      	negs	r5, r5
 8006b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b08:	4859      	ldr	r0, [pc, #356]	@ (8006c70 <_printf_i+0x238>)
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	e011      	b.n	8006b32 <_printf_i+0xfa>
 8006b0e:	6821      	ldr	r1, [r4, #0]
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	0608      	lsls	r0, r1, #24
 8006b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b18:	d402      	bmi.n	8006b20 <_printf_i+0xe8>
 8006b1a:	0649      	lsls	r1, r1, #25
 8006b1c:	bf48      	it	mi
 8006b1e:	b2ad      	uxthmi	r5, r5
 8006b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b22:	4853      	ldr	r0, [pc, #332]	@ (8006c70 <_printf_i+0x238>)
 8006b24:	6033      	str	r3, [r6, #0]
 8006b26:	bf14      	ite	ne
 8006b28:	230a      	movne	r3, #10
 8006b2a:	2308      	moveq	r3, #8
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b32:	6866      	ldr	r6, [r4, #4]
 8006b34:	60a6      	str	r6, [r4, #8]
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	bfa2      	ittt	ge
 8006b3a:	6821      	ldrge	r1, [r4, #0]
 8006b3c:	f021 0104 	bicge.w	r1, r1, #4
 8006b40:	6021      	strge	r1, [r4, #0]
 8006b42:	b90d      	cbnz	r5, 8006b48 <_printf_i+0x110>
 8006b44:	2e00      	cmp	r6, #0
 8006b46:	d04b      	beq.n	8006be0 <_printf_i+0x1a8>
 8006b48:	4616      	mov	r6, r2
 8006b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b52:	5dc7      	ldrb	r7, [r0, r7]
 8006b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b58:	462f      	mov	r7, r5
 8006b5a:	42bb      	cmp	r3, r7
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	d9f4      	bls.n	8006b4a <_printf_i+0x112>
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d10b      	bne.n	8006b7c <_printf_i+0x144>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	07df      	lsls	r7, r3, #31
 8006b68:	d508      	bpl.n	8006b7c <_printf_i+0x144>
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	6861      	ldr	r1, [r4, #4]
 8006b6e:	4299      	cmp	r1, r3
 8006b70:	bfde      	ittt	le
 8006b72:	2330      	movle	r3, #48	@ 0x30
 8006b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b7c:	1b92      	subs	r2, r2, r6
 8006b7e:	6122      	str	r2, [r4, #16]
 8006b80:	f8cd a000 	str.w	sl, [sp]
 8006b84:	464b      	mov	r3, r9
 8006b86:	aa03      	add	r2, sp, #12
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7ff fee6 	bl	800695c <_printf_common>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d14a      	bne.n	8006c2a <_printf_i+0x1f2>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	b004      	add	sp, #16
 8006b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f043 0320 	orr.w	r3, r3, #32
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	4833      	ldr	r0, [pc, #204]	@ (8006c74 <_printf_i+0x23c>)
 8006ba8:	2778      	movs	r7, #120	@ 0x78
 8006baa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	6831      	ldr	r1, [r6, #0]
 8006bb2:	061f      	lsls	r7, r3, #24
 8006bb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bb8:	d402      	bmi.n	8006bc0 <_printf_i+0x188>
 8006bba:	065f      	lsls	r7, r3, #25
 8006bbc:	bf48      	it	mi
 8006bbe:	b2ad      	uxthmi	r5, r5
 8006bc0:	6031      	str	r1, [r6, #0]
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	bf44      	itt	mi
 8006bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bca:	6023      	strmi	r3, [r4, #0]
 8006bcc:	b11d      	cbz	r5, 8006bd6 <_printf_i+0x19e>
 8006bce:	2310      	movs	r3, #16
 8006bd0:	e7ac      	b.n	8006b2c <_printf_i+0xf4>
 8006bd2:	4827      	ldr	r0, [pc, #156]	@ (8006c70 <_printf_i+0x238>)
 8006bd4:	e7e9      	b.n	8006baa <_printf_i+0x172>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f023 0320 	bic.w	r3, r3, #32
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	e7f6      	b.n	8006bce <_printf_i+0x196>
 8006be0:	4616      	mov	r6, r2
 8006be2:	e7bd      	b.n	8006b60 <_printf_i+0x128>
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	6825      	ldr	r5, [r4, #0]
 8006be8:	6961      	ldr	r1, [r4, #20]
 8006bea:	1d18      	adds	r0, r3, #4
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	062e      	lsls	r6, r5, #24
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	d501      	bpl.n	8006bf8 <_printf_i+0x1c0>
 8006bf4:	6019      	str	r1, [r3, #0]
 8006bf6:	e002      	b.n	8006bfe <_printf_i+0x1c6>
 8006bf8:	0668      	lsls	r0, r5, #25
 8006bfa:	d5fb      	bpl.n	8006bf4 <_printf_i+0x1bc>
 8006bfc:	8019      	strh	r1, [r3, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	4616      	mov	r6, r2
 8006c04:	e7bc      	b.n	8006b80 <_printf_i+0x148>
 8006c06:	6833      	ldr	r3, [r6, #0]
 8006c08:	1d1a      	adds	r2, r3, #4
 8006c0a:	6032      	str	r2, [r6, #0]
 8006c0c:	681e      	ldr	r6, [r3, #0]
 8006c0e:	6862      	ldr	r2, [r4, #4]
 8006c10:	2100      	movs	r1, #0
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7f9 fab4 	bl	8000180 <memchr>
 8006c18:	b108      	cbz	r0, 8006c1e <_printf_i+0x1e6>
 8006c1a:	1b80      	subs	r0, r0, r6
 8006c1c:	6060      	str	r0, [r4, #4]
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	2300      	movs	r3, #0
 8006c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c28:	e7aa      	b.n	8006b80 <_printf_i+0x148>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4640      	mov	r0, r8
 8006c32:	47d0      	blx	sl
 8006c34:	3001      	adds	r0, #1
 8006c36:	d0ad      	beq.n	8006b94 <_printf_i+0x15c>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	079b      	lsls	r3, r3, #30
 8006c3c:	d413      	bmi.n	8006c66 <_printf_i+0x22e>
 8006c3e:	68e0      	ldr	r0, [r4, #12]
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	4298      	cmp	r0, r3
 8006c44:	bfb8      	it	lt
 8006c46:	4618      	movlt	r0, r3
 8006c48:	e7a6      	b.n	8006b98 <_printf_i+0x160>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	4649      	mov	r1, r9
 8006c50:	4640      	mov	r0, r8
 8006c52:	47d0      	blx	sl
 8006c54:	3001      	adds	r0, #1
 8006c56:	d09d      	beq.n	8006b94 <_printf_i+0x15c>
 8006c58:	3501      	adds	r5, #1
 8006c5a:	68e3      	ldr	r3, [r4, #12]
 8006c5c:	9903      	ldr	r1, [sp, #12]
 8006c5e:	1a5b      	subs	r3, r3, r1
 8006c60:	42ab      	cmp	r3, r5
 8006c62:	dcf2      	bgt.n	8006c4a <_printf_i+0x212>
 8006c64:	e7eb      	b.n	8006c3e <_printf_i+0x206>
 8006c66:	2500      	movs	r5, #0
 8006c68:	f104 0619 	add.w	r6, r4, #25
 8006c6c:	e7f5      	b.n	8006c5a <_printf_i+0x222>
 8006c6e:	bf00      	nop
 8006c70:	080070b9 	.word	0x080070b9
 8006c74:	080070ca 	.word	0x080070ca

08006c78 <memmove>:
 8006c78:	4288      	cmp	r0, r1
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	eb01 0402 	add.w	r4, r1, r2
 8006c80:	d902      	bls.n	8006c88 <memmove+0x10>
 8006c82:	4284      	cmp	r4, r0
 8006c84:	4623      	mov	r3, r4
 8006c86:	d807      	bhi.n	8006c98 <memmove+0x20>
 8006c88:	1e43      	subs	r3, r0, #1
 8006c8a:	42a1      	cmp	r1, r4
 8006c8c:	d008      	beq.n	8006ca0 <memmove+0x28>
 8006c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c96:	e7f8      	b.n	8006c8a <memmove+0x12>
 8006c98:	4402      	add	r2, r0
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	428a      	cmp	r2, r1
 8006c9e:	d100      	bne.n	8006ca2 <memmove+0x2a>
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006caa:	e7f7      	b.n	8006c9c <memmove+0x24>

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	@ (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa f910 	bl	8000edc <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20000e98 	.word	0x20000e98

08006ccc <memcpy>:
 8006ccc:	440a      	add	r2, r1
 8006cce:	4291      	cmp	r1, r2
 8006cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd4:	d100      	bne.n	8006cd8 <memcpy+0xc>
 8006cd6:	4770      	bx	lr
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	d1f9      	bne.n	8006cda <memcpy+0xe>
 8006ce6:	bd10      	pop	{r4, pc}

08006ce8 <_realloc_r>:
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	4680      	mov	r8, r0
 8006cee:	4615      	mov	r5, r2
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	b921      	cbnz	r1, 8006cfe <_realloc_r+0x16>
 8006cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	f7ff bc4b 	b.w	8006594 <_malloc_r>
 8006cfe:	b92a      	cbnz	r2, 8006d0c <_realloc_r+0x24>
 8006d00:	f7ff fbdc 	bl	80064bc <_free_r>
 8006d04:	2400      	movs	r4, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d0c:	f000 f81a 	bl	8006d44 <_malloc_usable_size_r>
 8006d10:	4285      	cmp	r5, r0
 8006d12:	4606      	mov	r6, r0
 8006d14:	d802      	bhi.n	8006d1c <_realloc_r+0x34>
 8006d16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d1a:	d8f4      	bhi.n	8006d06 <_realloc_r+0x1e>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f7ff fc38 	bl	8006594 <_malloc_r>
 8006d24:	4607      	mov	r7, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d0ec      	beq.n	8006d04 <_realloc_r+0x1c>
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4621      	mov	r1, r4
 8006d30:	bf28      	it	cs
 8006d32:	4632      	movcs	r2, r6
 8006d34:	f7ff ffca 	bl	8006ccc <memcpy>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f7ff fbbe 	bl	80064bc <_free_r>
 8006d40:	463c      	mov	r4, r7
 8006d42:	e7e0      	b.n	8006d06 <_realloc_r+0x1e>

08006d44 <_malloc_usable_size_r>:
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f18      	subs	r0, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbc      	itt	lt
 8006d4e:	580b      	ldrlt	r3, [r1, r0]
 8006d50:	18c0      	addlt	r0, r0, r3
 8006d52:	4770      	bx	lr

08006d54 <_init>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr

08006d60 <_fini>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr
